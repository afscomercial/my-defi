{"version":3,"sources":["store/actions.js","helpers.js","store/interactions.js","store/selectors.js","components/Navbar.js","components/Spinner.js","components/OrderBook.js","components/Trades.js","components/MyTransactions.js","components/PriceChart.config.js","components/PriceChart.js","components/Balance.js","components/NewOrder.js","components/Content.js","components/App.js","store/reducers.js","index.js","store/configureStore.js"],"names":["web3AccountLoaded","account","type","cancelledOrdersLoaded","cancelledOrders","filledOrdersLoaded","filledOrders","allOrdersLoaded","allOrders","tokenBalanceLoaded","balance","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","ETHER_ADDRESS","GREEN","RED","DECIMALS","ether","wei","tokens","formatBalance","Math","round","loadWeb3","dispatch","a","window","ethereum","web3","Web3","connection","alert","location","assign","loadAccount","eth","getAccounts","accounts","loadToken","networkId","token","Contract","Token","abi","networks","address","contract","console","log","loadExchange","exchange","Exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","map","event","returnValues","tradeStream","orderStream","subscribeToEvents","events","Cancel","error","order","Trade","Deposit","Withdraw","Order","loadBalances","getBalance","etherBalance","methods","balanceOf","call","tokenBalance","exchangeEtherBalance","options","exchangeTokenBalance","depositToken","amount","utils","toWei","approve","send","from","state","get","accountSelector","createSelector","web3Selector","w","tokenLoaded","tokenSelector","tl","t","exchangeLoaded","exchangeSelector","el","e","contractsLoadedSelector","loaded","o","filledOrdersLoadedSelector","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","precision","tokenPrice","formattedTimestamp","moment","unix","format","tokenPriceClass","id","orderId","openOrders","all","filled","cancelled","reject","orderFilled","some","orderCancelled","orderBookLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","Object","keys","hour","group","open","high","maxBy","low","minBy","close","x","Date","y","orderCancellingSelector","status","orderFillingSelector","balancesLoadingSelector","etherBalanceSelector","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","connect","props","className","style","paddingLeft","href","target","rel","Spinner","renderOrder","OverlayTrigger","placement","overlay","Tooltip","onClick","fillOrder","on","hash","showOrderBook","orderBook","orderFilling","showMyOpenOrders","myOpenOrders","cancelOrder","myOpenOrdersLoaded","orderCancelling","myFilledOrders","showMyFilledOrders","Tabs","defaultActiveKey","Tab","eventKey","title","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","fontSize","fontFamily","undefined","formatter","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","showPriceChart","priceChart","height","priceChartLoaded","showForm","etherDepositAmount","tokenDepositAmount","etherWithdrawAmount","tokenWithdrawAmount","onSubmit","preventDefault","depositEther","value","placeholder","onChange","required","withdrawEther","withdrawToken","balancesLoading","useEffect","loadBlockchainData","buyOrder","sellOrder","showBuyTotal","showSellTotal","tokenGet","price","toString","makeOrder","makeBuyOrder","makeSellOrder","making","contractsLoaded","net","getId","rootReducer","combineReducers","action","findIndex","ReactDOM","render","store","createStore","document","getElementById"],"mappings":"27kgBAQO,SAASA,EAAkBC,GAChC,MAAO,CACLC,KAAM,sBACND,WAoBG,SAASE,EAAsBC,GACpC,MAAO,CACLF,KAAM,0BACNE,mBAIG,SAASC,EAAmBC,GACjC,MAAO,CACLJ,KAAM,uBACNI,gBAIG,SAASC,EAAgBC,GAC9B,MAAO,CACLN,KAAM,oBACNM,aAwCG,SAASC,EAAmBC,GACjC,MAAO,CACLR,KAAM,uBACNQ,WAIG,SAASC,EAA2BD,GACzC,MAAO,CACLR,KAAM,gCACNQ,WAIG,SAASE,EAA2BF,GACzC,MAAO,CACLR,KAAM,gCACNQ,W,sBCzGSG,EAAgB,6CAChBC,EAAQ,UACRC,EAAM,SAENC,EAAQ,SAAI,GAAM,IAGlBC,EAAQ,SAACC,GACpB,GAAIA,EACF,OAAOA,EAAMF,GAKJG,EAASF,EAETG,EAAgB,SAACV,GAM5B,OAHAA,EAAUO,EAAMP,GAChBA,EAAUW,KAAKC,MAHG,IAGGZ,GAHH,KCUPa,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACS,qBAApBC,OAAOC,SADI,uBAEdC,EAAO,IAAIC,IAAKH,OAAOC,UAC7BH,EF5BK,CACLtB,KAAM,cACN4B,WE0BoBF,IAHA,kBAIbA,GAJa,OAMpBF,OAAOK,MAAM,2BACbL,OAAOM,SAASC,OAAO,wBAPH,2CAAH,sDAWRC,EAAW,uCAAG,WAAON,EAAMJ,GAAb,iBAAAC,EAAA,sEACFG,EAAKO,IAAIC,cADP,cACnBC,EADmB,gBAEHA,EAAS,GAFN,UAGF,qBADjBpC,EAFmB,gCAIvBuB,EAASxB,EAAkBC,IAJJ,kBAKhBA,GALgB,eAOvByB,OAAOK,MAAM,8BAPU,kBAQhB,MARgB,4CAAH,wDAYXO,EAAS,uCAAG,WAAOV,EAAMW,EAAWf,GAAxB,eAAAC,EAAA,sEAEfe,EAAQ,IAAIZ,EAAKO,IAAIM,SACzBC,EAAMC,IACND,EAAME,SAASL,GAAWM,SAE5BrB,EFvCK,CACLtB,KAAM,eACN4C,SEqCqBN,IANA,kBAOdA,GAPc,uCASrBO,QAAQC,IACN,8FAVmB,kBAYd,MAZc,yDAAH,0DAgBTC,EAAY,uCAAG,WAAOrB,EAAMW,EAAWf,GAAxB,eAAAC,EAAA,sEAElByB,EAAW,IAAItB,EAAKO,IAAIM,SAC5BU,EAASR,IACTQ,EAASP,SAASL,GAAWM,SAE/BrB,EF/CK,CACLtB,KAAM,kBACN4C,SE6CwBI,IANA,kBAOjBA,GAPiB,uCASxBH,QAAQC,IACN,8FAVsB,kBAYjB,MAZiB,yDAAH,0DAeZI,EAAa,uCAAG,WAAOF,EAAU1B,GAAjB,yBAAAC,EAAA,sEAEAyB,EAASG,cAAc,SAAU,CAC1DC,UAAW,EACXC,QAAS,WAJgB,cAErBC,EAFqB,OAOrBpD,EAAkBoD,EAAaC,KAAI,SAACC,GAAD,OAAWA,EAAMC,gBAE1DnC,EAASrB,EAAsBC,IATJ,SAYD8C,EAASG,cAAc,QAAS,CACxDC,UAAW,EACXC,QAAS,WAdgB,cAYrBK,EAZqB,OAiBrBtD,EAAesD,EAAYH,KAAI,SAACC,GAAD,OAAWA,EAAMC,gBAEtDnC,EAASnB,EAAmBC,IAnBD,UAsBD4C,EAASG,cAAc,QAAS,CACxDC,UAAW,EACXC,QAAS,WAxBgB,QAsBrBM,EAtBqB,OA2BrBrD,EAAYqD,EAAYJ,KAAI,SAACC,GAAD,OAAWA,EAAMC,gBAEnDnC,EAASjB,EAAgBC,IA7BE,4CAAH,wDA6CbsD,EAAiB,uCAAG,WAAOZ,EAAU1B,GAAjB,SAAAC,EAAA,sDAC/ByB,EAASa,OAAOC,OAAO,IAAI,SAACC,EAAOP,GACjClC,EFpEK,CACLtB,KAAM,kBACNgE,MEkEwBR,EAAMC,kBAEhCT,EAASa,OAAOI,MAAM,IAAI,SAACF,EAAOP,GAChClC,EFzDK,CACLtB,KAAM,eACNgE,MEuDqBR,EAAMC,kBAE7BT,EAASa,OAAOK,QAAQ,IAAI,SAACH,EAAOP,GAClClC,EFxBK,CACLtB,KAAM,uBE0BRgD,EAASa,OAAOM,SAAS,IAAI,SAACJ,EAAOP,GACnClC,EF5BK,CACLtB,KAAM,uBE8BRgD,EAASa,OAAOO,MAAM,IAAI,SAACL,EAAOP,GAChClC,EF+BK,CACLtB,KAAM,aACNgE,MEjCmBR,EAAMC,kBAhBI,2CAAH,wDAiCjBY,EAAY,uCAAG,WAC1B/C,EACAI,EACAsB,EACAV,EACAvC,GAL0B,qBAAAwB,EAAA,yDAOH,qBAAZxB,EAPe,iCASG2B,EAAKO,IAAIqC,WAAWvE,GATvB,cASlBwE,EATkB,OAUxBjD,EFvFK,CACLtB,KAAM,uBACNQ,QEqF4B+D,IAVJ,SAaGjC,EAAMkC,QAAQC,UAAU1E,GAAS2E,OAbpC,cAalBC,EAbkB,OAcxBrD,EAASf,EAAmBoE,IAdJ,UAiBW3B,EAASwB,QACzCC,UAAU9D,EAAeZ,GACzB2E,OAnBqB,eAiBlBE,EAjBkB,OAoBxBtD,EAASb,EAA2BmE,IApBZ,UAuBW5B,EAASwB,QACzCC,UAAUnC,EAAMuC,QAAQlC,QAAS5C,GACjC2E,OAzBqB,QAuBlBI,EAvBkB,OA0BxBxD,EAASZ,EAA2BoE,IAGpCxD,EF9EK,CACLtB,KAAM,oBEgDkB,wBA+BxBwB,OAAOK,MAAM,8BA/BW,4CAAH,8DA6DZkD,EAAY,uCAAG,WAC1BzD,EACA0B,EACAtB,EACAY,EACA0C,EACAjF,GAN0B,SAAAwB,EAAA,6DAQ1ByD,EAAStD,EAAKuD,MAAMC,MAAMF,EAAQ,SARR,kBAWlB1C,EAAMkC,QACTW,QAAQnC,EAAS6B,QAAQlC,QAASqC,GAClCI,KAAK,CAAEC,KAAMtF,IAbQ,uBAclBiD,EAASwB,QACZO,aAAazC,EAAMuC,QAAQlC,QAASqC,GACpCI,KAAK,CAAEC,KAAMtF,IAhBQ,OAiBxBuB,EFzHK,CACLtB,KAAM,qBEuGkB,gDAmBxB6C,QAAQkB,MAAR,MACAvC,OAAOK,MAAP,uBApBwB,yDAAH,gE,iDCvNnB9B,EAAU,SAACuF,GAAD,OAAWC,cAAID,EAAO,iBACzBE,EAAkBC,YAAe1F,GAAS,SAACwB,GAAD,OAAOA,KAGjDmE,EAAeD,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,sBACgB,SAAAK,GAAC,OAAIA,KAEhDC,EAAc,SAACN,GAAD,OAAWC,cAAID,EAAO,gBAAgB,IAI7CO,GAHsBJ,YAAeG,GAAa,SAACE,GAAD,OAAQA,KAG1CL,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,qBACiB,SAAAS,GAAC,OAAIA,MAElDC,EAAiB,SAACV,GAAD,OAAWC,cAAID,EAAO,mBAAmB,IAOnDW,GANyBR,YACpCO,GACA,SAACE,GAAD,OAAQA,KAIsBT,aADf,SAACH,GAAD,OAAWC,cAAID,EAAO,wBACkB,SAACa,GAAD,OAAOA,MAEnDC,EAA0BX,YACrCG,EACAI,GACA,SAACF,EAAII,GAAL,OAAYJ,GAAMI,KASdjG,EAAwB,SAACqF,GAAD,OAC5BC,cAAID,EAAO,mCAAmC,IAM1CpF,GALuCuF,YAC3CxF,GACA,SAACoG,GAAD,OAAYA,KAGU,SAACf,GAAD,OACtBC,cAAID,EAAO,gCAAiC,MAOxCnF,GANiCsF,YACrCvF,GACA,SAACoG,GAAD,OAAOA,KAIkB,SAAChB,GAAD,OACzBC,cAAID,EAAO,gCAAgC,KAChCiB,EAA6Bd,YACxCtF,GACA,SAACkG,GAAD,OAAYA,KAGRjG,GAAe,SAACkF,GAAD,OAAWC,cAAID,EAAO,6BAA8B,KAC5DkB,GAAuBf,YAAerF,IAAc,SAACqG,GAOhE,OALAA,EAASA,EAAOC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUpF,EAAEqF,UAAYD,EAAEC,aAI/CH,GAFAA,EAASI,GAAqBJ,IAEdC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUA,EAAEC,UAAYrF,EAAEqF,gBAI3CC,GAAuB,SAACJ,GAE5B,IAAIK,EAAgBL,EAAO,GAC3B,OAAOA,EAAOlD,KAAI,SAACS,GAIjB,OAHAA,EAAQ+C,GAAc/C,GACtBA,EAAQgD,GAAoBhD,EAAO8C,GACnCA,EAAgB9C,EACTA,MAIL+C,GAAgB,SAAC/C,GACrB,IAAIiD,EACAC,EAEAlD,EAAMmD,YAAcxG,GACtBsG,EAAcjD,EAAMoD,WACpBF,EAAclD,EAAMqD,YAEpBJ,EAAcjD,EAAMqD,UACpBH,EAAclD,EAAMoD,YAItB,IAAME,EAAY,IACdC,EAAaN,EAAcC,EAG/B,OAFAK,EAAapG,KAAKC,MAAMmG,EAAaD,GAAaA,EAE3C,2BACFtD,GADL,IAEEiD,YAAalG,EAAMkG,GACnBC,YAAajG,EAAOiG,GACpBK,aACAC,mBAAoBC,IAAOC,KAAK1D,EAAM4C,WAAWe,OAAO,oBAItDX,GAAsB,SAAChD,EAAO8C,GAClC,OAAO,2BACF9C,GADL,IAEE4D,gBAAiBA,GAAgB5D,EAAMuD,WAAYvD,EAAM6D,GAAIf,MAI3Dc,GAAkB,SAACL,EAAYO,EAAShB,GAE5C,OAAIA,EAAce,KAAOC,GAMrBhB,EAAcS,YAAcA,EALvB3G,EAQAC,GAILkH,GAAa,SAACzC,GAClB,IAAM0C,EAhGU,SAAC1C,GAAD,OAAWC,cAAID,EAAO,0BAA2B,IAgGrDhF,CAAUgF,GAChB2C,EAAS7H,GAAakF,GACtB4C,EAAYhI,EAAgBoF,GAE5ByC,EAAaI,iBAAOH,GAAK,SAAChE,GAC9B,IAAMoE,EAAcH,EAAOI,MAAK,SAAC/B,GAAD,OAAOA,EAAEuB,KAAO7D,EAAM6D,MAChDS,EAAiBJ,EAAUG,MAAK,SAAC/B,GAAD,OAAOA,EAAEuB,KAAO7D,EAAM6D,MAC5D,OAAOO,GAAeE,KAGxB,OAAOP,GAGHQ,GAAkB,SAACjD,GAAD,OACtBrF,EAAsBqF,IACtBnF,EAAmBmF,IAjHG,SAACA,GAAD,OACtBC,cAAID,EAAO,6BAA6B,GAiHxCjF,CAAgBiF,IACLkD,GAA0B/C,YACrC8C,IACA,SAAClC,GAAD,OAAYA,KAIDoC,GAAoBhD,YAAesC,IAAY,SAACtB,GAE3DA,EAASiC,GAAwBjC,GAEjCA,EAASkC,kBAAQlC,EAAQ,aAEzB,IAAMmC,EAAYrD,cAAIkB,EAAQ,MAAO,IAErCA,EAAM,2BACDA,GADC,IAEJmC,UAAWA,EAAUlC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUA,EAAEY,WAAahG,EAAEgG,gBAGvD,IAAMsB,EAAatD,cAAIkB,EAAQ,OAAQ,IAMvC,OAJAA,EAAM,2BACDA,GADC,IAEJoC,WAAYA,EAAWnC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUA,EAAEY,WAAahG,EAAEgG,mBAKrDmB,GAA0B,SAACjC,GAC/B,OAAOA,EAAOlD,KAAI,SAACS,GAGjB,OAFAA,EAAQ+C,GAAc/C,GACtBA,EAAQ8E,GAAuB9E,OAK7B8E,GAAyB,SAAC9E,GAC9B,IAAM+E,EAAY/E,EAAMmD,YAAcxG,EAAgB,MAAQ,OAC9D,OAAO,2BACFqD,GADL,IAEE+E,YACAC,eAA8B,QAAdD,EAAsBnI,EAAQC,EAC9CoI,gBAA+B,QAAdF,EAAsB,OAAS,SAIvCG,GAA+BzD,YAC1CtF,GACA,SAACkG,GAAD,OAAYA,KAGD8C,GAAyB1D,YACpC1F,EACAK,IACA,SAACL,EAAS0G,GAOR,OAHAA,GAFAA,EAASA,EAAO2C,QAAO,SAAC9C,GAAD,OAAOA,EAAE+C,OAAStJ,GAAWuG,EAAEgD,WAAavJ,MAEnD2G,MAAK,SAACnF,EAAGoF,GAAJ,OAAUpF,EAAEqF,UAAYD,EAAEC,aAE/CH,EAAS8C,GAAuB9C,EAAQ1G,MAKtCwJ,GAAyB,SAAC9C,EAAQ1G,GACtC,OAAO0G,EAAOlD,KAAI,SAACS,GAGjB,OAFAA,EAAQ+C,GAAc/C,GACtBA,EAAQwF,GAAsBxF,EAAOjE,OAKnCyJ,GAAwB,SAACxF,EAAOjE,GACpC,IAEIgJ,EAOJ,OALEA,EAJc/E,EAAMqF,OAAStJ,EAIjBiE,EAAMmD,YAAcxG,EAAgB,MAAQ,OAE5CqD,EAAMmD,YAAcxG,EAAgB,OAAS,MAGpD,2BACFqD,GADL,IAEE+E,YACAC,eAA8B,QAAdD,EAAsBnI,EAAQC,EAC9C4I,UAAyB,QAAdV,EAAsB,IAAM,OAI9BW,GAA6BjE,YACxC8C,IACA,SAAClC,GAAD,OAAYA,KAGDsD,GAAuBlE,YAClC1F,EACAgI,IACA,SAAChI,EAAS0G,GAOR,OALAA,EAASA,EAAO2C,QAAO,SAAC9C,GAAD,OAAOA,EAAE+C,OAAStJ,KAIzC0G,GAFAA,EAASmD,GAAqBnD,IAEdC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUA,EAAEC,UAAYrF,EAAEqF,gBAK7CgD,GAAuB,SAACnD,EAAQ1G,GACpC,OAAO0G,EAAOlD,KAAI,SAACS,GAGjB,OAFAA,EAAQ+C,GAAc/C,GACtBA,EAAQ6F,GAAoB7F,EAAOjE,OAKjC8J,GAAsB,SAAC7F,EAAOjE,GAClC,IAAIgJ,EAAY/E,EAAMmD,YAAcxG,EAAgB,MAAQ,OAE5D,OAAO,2BACFqD,GADL,IAEE+E,YACAC,eAA8B,QAAdD,EAAsBnI,EAAQC,KAIrCiJ,GAA2BrE,YACtCtF,GACA,SAACkG,GAAD,OAAYA,KAGD0D,GAAqBtE,YAAerF,IAAc,SAACqG,GAM9D,IAAIuD,EAAiBC,EANoD,GAIzExD,GAFAA,EAASA,EAAOC,MAAK,SAACnF,EAAGoF,GAAJ,OAAUpF,EAAEqF,UAAYD,EAAEC,cAE/BrD,KAAI,SAAC+C,GAAD,OAAOS,GAAcT,OAGH4D,MAAMzD,EAAO0D,OAAS,EAAG1D,EAAO0D,QAPG,mBAOxEH,EAPwE,KAOvDC,EAPuD,KASzE,IAAMG,EAAY7E,cAAI0E,EAAW,aAAc,GAI/C,MAAO,CACLG,YACAC,gBAAiBD,GAJK7E,cAAIyE,EAAiB,aAAc,GAIT,IAAM,IACtDM,OAAQ,CACN,CACEC,KAAMC,GAAe/D,SAMvB+D,GAAiB,SAAC/D,GAuBtB,OArBAA,EAASkC,kBAAQlC,GAAQ,SAACH,GAAD,OACvBmB,IAAOC,KAAKpB,EAAEM,WAAW6D,QAAQ,QAAQ9C,YAG7B+C,OAAOC,KAAKlE,GAEFlD,KAAI,SAACqH,GAE3B,IAAMC,EAAQpE,EAAOmE,GAEfE,EAAOD,EAAM,GACbE,EAAOC,gBAAMH,EAAO,cACpBI,EAAMC,gBAAML,EAAO,cACnBM,EAAQN,EAAMA,EAAMV,OAAS,GAEnC,MAAO,CACLiB,EAAG,IAAIC,KAAKT,GACZU,EAAG,CAACR,EAAKvD,WAAYwD,EAAKxD,WAAY0D,EAAI1D,WAAY4D,EAAM5D,iBASrDgE,GAA0B9F,aAFf,SAACH,GAAD,OACtBC,cAAID,EAAO,4BAA4B,MAGvC,SAACkG,GAAD,OAAYA,KAIDC,GAAuBhG,aADf,SAACH,GAAD,OAAWC,cAAID,EAAO,yBAAyB,MAGlE,SAACkG,GAAD,OAAYA,KAKDE,GAA0BjG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,4BAA4B,MACD,SAAAkG,GAAM,OAAIA,KAGpEG,GAAuBlG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,eAAgB,MAGvD,SAAC9E,GACC,OAAOU,EAAcV,MAKZoL,GAAuBnG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,gBAAiB,MAGxD,SAAC9E,GACC,OAAOU,EAAcV,MAKZqL,GAA+BpG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,wBAAyB,MAGxE,SAAC9E,GACC,OAAOU,EAAcV,MAKZsL,GAA+BrG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,wBAAyB,MAGxE,SAAC9E,GACC,OAAOU,EAAcV,MAKZuL,GAA6BtG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,8BAA+B,SACD,SAAAN,GAAM,OAAIA,KAG1EgH,GAA8BvG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,+BAAgC,SACD,SAAAN,GAAM,OAAIA,KAG5EiH,GAA6BxG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,8BAA+B,SACD,SAAAN,GAAM,OAAIA,KAG1EkH,GAA8BzG,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,+BAAgC,SACD,SAAAN,GAAM,OAAIA,KAG5EmH,GAAmB1G,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,oBAAqB,OACD,SAAAtB,GAAK,OAAIA,KAGrDoI,GAAoB3G,aADf,SAAAH,GAAK,OAAIC,cAAID,EAAO,qBAAsB,OACD,SAAAtB,GAAK,OAAIA,K,QClWrDqI,gBANS,SAAC/G,GACvB,MAAO,CACLvF,QAASyF,EAAgBF,MAId+G,EAvCA,SAACC,GACd,OACE,uBAAKC,UAAU,iDAAf,UACE,oBAAGA,UAAU,eAAeC,MAAO,CAACC,YAAa,QAASC,KAAK,KAA/D,iCAGA,yBACEH,UAAU,iBACVvM,KAAK,SACL,cAAY,WACZ,cAAY,qBACZ,gBAAc,oBACd,gBAAc,QACd,aAAW,oBAPb,SASE,uBAAMuM,UAAU,0BAElB,qBAAIA,UAAU,qBAAd,SACE,qBAAIA,UAAU,WAAd,SACE,oBACEA,UAAU,iBACVG,KAAI,uCAAkCJ,EAAMvM,SAC5C4M,OAAO,SACPC,IAAI,sBAJN,SAMGN,EAAMvM,oBCpBJ8M,GARC,SAAC,GACf,MAAa,UADe,EAAX7M,KAER,wBAAOuM,UAAU,0CAEjB,sBAAKA,UAAU,2C,oBCQpBO,GAAc,SAAC9I,EAAOsI,GAC1B,IAAQhL,EAAgCgL,EAAhChL,SAAU0B,EAAsBsJ,EAAtBtJ,SAAUjD,EAAYuM,EAAZvM,QAE5B,OACE,eAACgN,GAAA,EAAD,CAEEC,UAAU,MACVC,QACE,eAACC,GAAA,EAAD,CAASrF,GAAI7D,EAAM6D,GAAnB,iCACoB7D,EAAMiF,mBAL9B,SASE,sBAEEsD,UAAU,mBACVY,QAAS,SAAChH,GAAD,OJsHQ,SAAC7E,EAAU0B,EAAUgB,EAAOjE,GACnDiD,EAASwB,QACN4I,UAAUpJ,EAAM6D,IAChBzC,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EFnFG,CACLtB,KAAM,qBEoFLqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQC,IAAIiB,GACZvC,OAAOK,MAAM,0BI/HKuL,CAAU9L,EAAU0B,EAAUgB,EAAOjE,IAHvD,UAKE,8BAAKiE,EAAMkD,cACX,qBAAIqF,UAAS,eAAUvI,EAAMgF,gBAA7B,SAAgDhF,EAAMuD,aACtD,8BAAKvD,EAAMiD,gBANNjD,EAAM6D,KATR7D,EAAM6D,KAqBX0F,GAAgB,SAACjB,GACrB,IAAQkB,EAAclB,EAAdkB,UAER,OACE,mCACGA,EAAU3E,WAAWtF,KAAI,SAACS,GAAD,OAAW8I,GAAY9I,EAAOsI,MACxD,gCACE,uCACA,2CACA,yCAEDkB,EAAU5E,UAAUrF,KAAI,SAACS,GAAD,OAAW8I,GAAY9I,EAAOsI,UAoC9CD,gBAZS,SAAC/G,GACvB,IAAMiD,EAAkBC,GAAwBlD,GAC1CmI,EAAehC,GAAqBnG,GAE1C,MAAO,CACLkI,UAAW/E,GAAkBnD,GAC7BiI,cAAehF,IAAoBkF,EACnCzK,SAAUiD,EAAiBX,GAC3BvF,QAASyF,EAAgBF,MAId+G,EA/BG,SAACC,GACjB,OACE,sBAAKC,UAAU,WAAf,SACE,uBAAKA,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,wBACA,sBAAKA,UAAU,uBAAf,SACE,wBAAOA,UAAU,kCAAjB,SACGD,EAAMiB,cACLA,GAAcjB,GAEd,eAAC,GAAD,CAAStM,KAAK,sBCNbqM,gBAPS,SAAC/G,GACvB,MAAO,CACLnF,mBAAoBoG,EAA2BjB,GAC/ClF,aAAcoG,GAAqBlB,MAIxB+G,EAjCA,SAACC,GACd,OACE,sBAAKC,UAAU,WAAf,SACE,uBAAKA,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,oBACA,sBAAKA,UAAU,YAAf,SACE,yBAAOA,UAAU,kCAAjB,UACE,iCACE,gCACE,uCACA,uCACA,gDAGHD,EAAMnM,oBAhCOC,EAiCKkM,EAAMlM,aA/BjC,iCACGA,EAAamD,KAAI,SAACS,GACjB,OACE,sBAAIuI,UAAS,gBAAWvI,EAAM6D,IAA9B,UACE,qBAAI0E,UAAU,aAAd,SAA4BvI,EAAMwD,qBAClC,8BAAKxD,EAAMkD,cACX,qBAAIqF,UAAS,eAAUvI,EAAM4D,iBAA7B,SACG5D,EAAMuD,eAJ8BvD,EAAM6D,UA8B3C,eAAC,GAAD,CAAS7H,KAAK,oBAnCH,IAACI,K,oBC4BpBsN,GAAmB,SAACpB,GACxB,IAAQqB,EAA8CrB,EAA9CqB,aAAcrM,EAAgCgL,EAAhChL,SAAU0B,EAAsBsJ,EAAtBtJ,SAAUjD,EAAYuM,EAAZvM,QAC1C,OACE,iCACG4N,EAAapK,KAAI,SAACS,GACjB,OACE,gCACE,qBAAIuI,UAAS,eAAUvI,EAAMgF,gBAA7B,SACGhF,EAAMkD,cAET,qBAAIqF,UAAS,eAAUvI,EAAMgF,gBAA7B,SACGhF,EAAMuD,aAET,qBACEgF,UAAU,0BACVY,QAAS,SAAChH,IN+DG,SAAC7E,EAAU0B,EAAUgB,EAAOjE,GACrDiD,EAASwB,QACNoJ,YAAY5J,EAAM6D,IAClBzC,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EFhEG,CACLtB,KAAM,wBEiELqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQC,IAAIiB,GACZvC,OAAOK,MAAM,0BMvEH+L,CAAYtM,EAAU0B,EAAUgB,EAAOjE,IAH3C,iBAPOiE,EAAM6D,UA+EVwE,gBAbS,SAAC/G,GACvB,IAAMuI,EAAqBnE,GAA2BpE,GAChDwI,EAAkBvC,GAAwBjG,GAChD,MAAO,CACLyI,eAAgB5E,GAAuB7D,GACvC0I,mBAAoB9E,GAA6B5D,GACjDqI,aAAchE,GAAqBrE,GACnCoI,iBAAkBG,IAAuBC,EACzC9K,SAAUiD,EAAiBX,GAC3BvF,QAASyF,EAAgBF,MAId+G,EAzDQ,SAACC,GACtB,OACE,uBAAKC,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,6BACA,sBAAKA,UAAU,YAAf,SACE,gBAAC0B,GAAA,EAAD,CAAMC,iBAAiB,SAAS3B,UAAU,qBAA1C,UACE,eAAC4B,GAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,SAAS9B,UAAU,UAAhD,SACE,yBAAOA,UAAU,kCAAjB,UACE,iCACE,gCACE,uCACA,uCACA,gDAGHD,EAAM0B,oBAhEOD,EAiEOzB,EAAMyB,eA/DrC,iCACGA,EAAexK,KAAI,SAACS,GACnB,OACE,gCACE,qBAAIuI,UAAU,aAAd,SAA4BvI,EAAMwD,qBAClC,sBAAI+E,UAAS,eAAUvI,EAAMgF,gBAA7B,UACGhF,EAAMyF,UACNzF,EAAMkD,eAET,qBAAIqF,UAAS,eAAUvI,EAAMgF,gBAA7B,SACGhF,EAAMuD,eAPFvD,EAAM6D,UA8DT,eAAC,GAAD,CAAS7H,KAAK,eAIpB,eAACmO,GAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,SAA7B,SACE,yBAAO9B,UAAU,kCAAjB,UACE,iCACE,gCACE,yCACA,2CACA,8CAGHD,EAAMoB,iBACLA,GAAiBpB,GAEjB,eAAC,GAAD,CAAStM,KAAK,uBAnFH,IAAC+N,K,qBCdfO,GAAe,CACxBC,MAAO,CACLC,WAAY,CAAEC,SAAS,GACvBC,QAAS,CAAEC,MAAM,GACjBC,MAAO,SAETC,QAAS,CACPJ,SAAS,EACTK,OAAO,EACPtC,MAAO,CACLuC,SAAU,OACVC,gBAAYC,GAEd7D,EAAG,CACCuD,MAAM,EACNhH,OAAQ,SACRuH,eAAWD,GAEf3D,EAAG,CACDqD,MAAM,EACNN,MAAO,SAETc,OAAQ,CACNR,MAAM,GAERS,MAAO,CACJC,QAAS,QAEZC,MAAO,CACHb,SAAS,EACTc,SAAU,WACVC,QAAS,EACTC,QAAS,IAGfC,MAAO,CACL1P,KAAM,WACN2P,OAAQ,CACNhB,MAAM,EACNnC,MAAO,CACHoD,OAAQ,OACRb,SAAU,MACVc,SAAU,4BAIlBC,MAAO,CACLH,OAAQ,CACNhB,MAAM,EACNoB,SAAU,EACVC,SAAU,IACVxD,MAAO,CACLyD,MAAO,OACPlB,SAAU,MACVc,SAAU,0BAEZL,QAAS,EACTC,QAAS,EACTS,OAAQ,KCvCVC,IDgDO,IAAI9E,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,UAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,YAIT,IAAIA,KAAK,WAIT,IAAIA,KAAK,YC5RC,SAAC+E,GACtB,OACE,uBAAK7D,UAAU,cAAf,UACE,sBAAKA,UAAU,QAAf,SACE,kDAdalC,EAcoB+F,EAAW/F,gBAZ3B,MAApBA,EACQ,uBAAMkC,UAAU,eAAhB,oBAEA,uBAAMA,UAAU,cAAhB,qBASL,SAAsE6D,EAAWhG,eAEnF,eAAC,KAAD,CAAOvF,QAASyJ,GAAchE,OAAQ8F,EAAW9F,OAAQtK,KAAK,cAAc4O,MAAM,OAAOyB,OAAO,YAhBlF,IAAChG,IAyCNgC,gBAPS,SAAC/G,GACvB,MAAO,CACLgL,iBAAkBxG,GAAyBxE,GAC3C8K,WAAYrG,GAAmBzE,MAIpB+G,EApBI,SAACC,GAChB,OACE,uBAAKC,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,yBAGA,sBAAKA,UAAU,YAAf,SACGD,EAAMgE,iBAAmBH,GAAe7D,EAAM8D,YAAc,eAAC,GAAD,YCJjEG,GAAW,SAACjE,GAChB,IACEhL,EAaEgL,EAbFhL,SACA0B,EAYEsJ,EAZFtJ,SACAtB,EAWE4K,EAXF5K,KACA3B,EAUEuM,EAVFvM,QACAwE,EASE+H,EATF/H,aACAI,EAQE2H,EARF3H,aACAC,EAOE0H,EAPF1H,qBACAE,EAMEwH,EANFxH,qBACA0L,EAKElE,EALFkE,mBACAlO,EAIEgK,EAJFhK,MACAmO,EAGEnE,EAHFmE,mBACAC,EAEEpE,EAFFoE,oBACAC,EACErE,EADFqE,oBAGF,OACE,gBAAC1C,GAAA,EAAD,CAAMC,iBAAiB,UAAU3B,UAAU,qBAA3C,UACE,gBAAC4B,GAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,UAAU9B,UAAU,UAAlD,UACE,yBAAOA,UAAU,kCAAjB,UACE,iCACE,gCACE,wCACA,yCACA,gDAGJ,iCACE,gCACE,sCACA,8BAAKhI,IACL,8BAAKK,YAKX,wBACE2H,UAAU,MACVqE,SAAU,SAACpN,GACTA,EAAMqN,iBTyHU,SAACvP,EAAU0B,EAAUtB,EAAMsD,EAAQjF,GAC7DiD,EAASwB,QACNsM,eACA1L,KAAK,CAAEC,KAAMtF,EAASgR,MAAOrP,EAAKuD,MAAMC,MAAMF,EAAQ,WACtDqI,GAAG,mBAAmB,SAACC,GACtBhM,EFnFG,CACLtB,KAAM,wBEoFLqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQkB,MAAMA,GACdvC,OAAOK,MAAP,0BSjIMiP,CAAaxP,EAAU0B,EAAUtB,EAAM8O,EAAoBzQ,IAJ/D,UAOE,sBAAKwM,UAAU,wBAAf,SACE,wBACEvM,KAAK,OACLgR,YAAY,aACZC,SAAU,SAAC9K,GAAD,OACR7E,EXwCP,CACLtB,KAAM,+BACNgF,OW1C+CmB,EAAEwG,OAAOoE,SAE9CxE,UAAU,kDACV2E,UAAQ,MAGZ,sBAAK3E,UAAU,6BAAf,SACE,yBAAQvM,KAAK,SAASuM,UAAU,mCAAhC,0BAMJ,wBAAOA,UAAU,kCAAjB,SACE,iCACE,gCACE,uCACA,8BAAK5H,IACL,8BAAKG,WAKX,wBACEyH,UAAU,MACVqE,SAAU,SAACpN,GACTA,EAAMqN,iBACN9L,EACEzD,EACA0B,EACAtB,EACAY,EACAmO,EACA1Q,IAVN,UAcE,sBAAKwM,UAAU,wBAAf,SACE,wBACEvM,KAAK,OACLgR,YAAY,cACZC,SAAU,SAAC9K,GAAD,OACR7E,EXYP,CACLtB,KAAM,+BACNgF,OWd+CmB,EAAEwG,OAAOoE,SAE9CxE,UAAU,kDACV2E,UAAQ,MAGZ,sBAAK3E,UAAU,6BAAf,SACE,yBAAQvM,KAAK,SAASuM,UAAU,mCAAhC,6BAON,gBAAC4B,GAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,WAAW9B,UAAU,UAApD,UACE,yBAAOA,UAAU,kCAAjB,UACE,iCACE,gCACE,wCACA,yCACA,gDAGJ,iCACE,gCACE,sCACA,8BAAKhI,IACL,8BAAKK,YAKX,wBACE2H,UAAU,MACVqE,SAAU,SAACpN,GACTA,EAAMqN,iBTgDW,SAACvP,EAAU0B,EAAUtB,EAAMsD,EAAQjF,GAC9DiD,EAASwB,QACN2M,cAAczP,EAAKuD,MAAMC,MAAMF,EAAQ,UACvCI,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EFhGG,CACLtB,KAAM,wBEiGLqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQkB,MAAMA,GACdvC,OAAOK,MAAP,0BSxDMsP,CACE7P,EACA0B,EACAtB,EACAgP,EACA3Q,IATN,UAaE,sBAAKwM,UAAU,wBAAf,SACE,wBACEvM,KAAK,OACLgR,YAAY,aACZC,SAAU,SAAC9K,GAAD,OACR7E,EX7CP,CACLtB,KAAM,gCACNgF,OW2CgDmB,EAAEwG,OAAOoE,SAE/CxE,UAAU,kDACV2E,UAAQ,MAGZ,sBAAK3E,UAAU,6BAAf,SACE,yBAAQvM,KAAK,SAASuM,UAAU,mCAAhC,2BAMJ,wBAAOA,UAAU,kCAAjB,SACE,iCACE,gCACE,uCACA,8BAAK5H,IACL,8BAAKG,WAKX,wBACEyH,UAAU,MACVqE,SAAU,SAACpN,GACTA,EAAMqN,iBT4DW,SAC3BvP,EACA0B,EACAtB,EACAY,EACA0C,EACAjF,GAEAiD,EAASwB,QACN4M,cAAc9O,EAAMuC,QAAQlC,QAASjB,EAAKuD,MAAMC,MAAMF,EAAQ,UAC9DI,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EF5JG,CACLtB,KAAM,wBE6JLqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQkB,MAAMA,GACdvC,OAAOK,MAAP,0BS3EMuP,CACE9P,EACA0B,EACAtB,EACAY,EACAqO,EACA5Q,IAVN,UAcE,sBAAKwM,UAAU,wBAAf,SACE,wBACEvM,KAAK,OACLgR,YAAY,cACZC,SAAU,SAAC9K,GAAD,OACR7E,EXzEP,CACLtB,KAAM,gCACNgF,OWuEgDmB,EAAEwG,OAAOoE,SAE/CxE,UAAU,kDACV2E,UAAQ,MAGZ,sBAAK3E,UAAU,6BAAf,SACE,yBAAQvM,KAAK,SAASuM,UAAU,mCAAhC,kCAiDGF,gBAtBS,SAAC/G,GAEvB,IAAM+L,EAAkB3F,GAAwBpG,GAEhD,MAAO,CACLvF,QAASyF,EAAgBF,GACzBtC,SAAUiD,EAAiBX,GAC3BhD,MAAOuD,EAAcP,GACrB5D,KAAMgE,EAAaJ,GACnBf,aAAcoH,GAAqBrG,GACnCX,aAAciH,GAAqBtG,GACnCV,qBAAsBiH,GAA6BvG,GACnDR,qBAAsBgH,GAA6BxG,GACnD+L,kBACAd,UAAWc,EACXb,mBAAoBzE,GAA2BzG,GAC/CoL,oBAAqB1E,GAA4B1G,GACjDmL,mBAAoBxE,GAA2B3G,GAC/CqL,oBAAqBzE,GAA4B5G,MAItC+G,EAvCC,SAACC,GASf,OARAgF,qBAAU,WACR,IAAMC,EAAkB,uCAAG,WAAOjF,GAAP,uBAAA/K,EAAA,6DACjBD,EAA6CgL,EAA7ChL,SAAUI,EAAmC4K,EAAnC5K,KAAMsB,EAA6BsJ,EAA7BtJ,SAAUV,EAAmBgK,EAAnBhK,MAAOvC,EAAYuM,EAAZvM,QADhB,SAEnBsE,EAAa/C,EAAUI,EAAMsB,EAAUV,EAAOvC,GAF3B,2CAAH,sDAIxBwR,EAAmBjF,KAClB,CAACA,IAGF,uBAAKC,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,qBACA,sBAAKA,UAAU,YAAf,SAA4BD,EAAMiE,SAAWA,GAASjE,GAAS,eAAC,GAAD,YClO/DiE,GAAW,SAACjE,GAChB,IACEhL,EASEgL,EATFhL,SACAkQ,EAQElF,EARFkF,SACAxO,EAOEsJ,EAPFtJ,SACAV,EAMEgK,EANFhK,MACAZ,EAKE4K,EALF5K,KACA3B,EAIEuM,EAJFvM,QACA0R,EAGEnF,EAHFmF,UACAC,EAEEpF,EAFFoF,aACAC,EACErF,EADFqF,cAGF,OACE,gBAAC1D,GAAA,EAAD,CAAMC,iBAAiB,MAAM3B,UAAU,qBAAvC,UACE,eAAC4B,GAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,MAAM9B,UAAU,UAA1C,SACE,wBACEqE,SAAU,SAACpN,GACTA,EAAMqN,iBVmPU,SAC1BvP,EACA0B,EACAV,EACAZ,EACAsC,EACAjE,GAEA,IAAM6R,EAAWtP,EAAMuC,QAAQlC,QACzB0E,EAAY3F,EAAKuD,MAAMC,MAAMlB,EAAMgB,OAAQ,SAE3CoC,EAAa1F,EAAKuD,MAAMC,OAC3BlB,EAAMgB,OAAShB,EAAM6N,OAAOC,WAC7B,SAGF9O,EAASwB,QACNuN,UAAUH,EAAUvK,EAPL1G,6CAO2ByG,GAC1ChC,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EFtIG,CACLtB,KAAM,wBEuILqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQkB,MAAMA,GACdvC,OAAOK,MAAP,0BU1QMmQ,CAAa1Q,EAAU0B,EAAUV,EAAOZ,EAAM8P,EAAUzR,IAH5D,UAME,uBAAKwM,UAAU,mBAAf,UACE,uDACA,sBAAKA,UAAU,cAAf,SACE,wBACEvM,KAAK,OACLuM,UAAU,kDACVyE,YAAY,aACZC,SAAU,SAAC9K,GAAD,OACR7E,EZuGT,CACLtB,KAAM,2BACNgF,OYzG6CmB,EAAEwG,OAAOoE,SAE1CG,UAAQ,SAId,uBAAK3E,UAAU,mBAAf,UACE,+CACA,sBAAKA,UAAU,cAAf,SACE,wBACEvM,KAAK,OACLuM,UAAU,kDACVyE,YAAY,YACZC,SAAU,SAAC9K,GAAD,OAAO7E,EZiGxB,CACLtB,KAAM,0BACN6R,MYnG2D1L,EAAEwG,OAAOoE,SACxDG,UAAQ,SAId,yBAAQlR,KAAK,SAASuM,UAAU,mCAAhC,uBAGCmF,EACC,6CAAeF,EAASxM,OAASwM,EAASK,MAA1C,UACE,UAIR,eAAC1D,GAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,OAAO9B,UAAU,UAA5C,SACE,wBACEqE,SAAU,SAACpN,GACTA,EAAMqN,iBVqOW,SAC3BvP,EACA0B,EACAV,EACAZ,EACAsC,EACAjE,GAEA,IACMsH,EAAY3F,EAAKuD,MAAMC,OAC1BlB,EAAMgB,OAAShB,EAAM6N,OAAOC,WAC7B,SAEI3K,EAAY7E,EAAMuC,QAAQlC,QAC1ByE,EAAa1F,EAAKuD,MAAMC,MAAMlB,EAAMgB,OAAQ,SAElDhC,EAASwB,QACNuN,UATcpR,6CASM0G,EAAWF,EAAWC,GAC1ChC,KAAK,CAAEC,KAAMtF,IACbsN,GAAG,mBAAmB,SAACC,GACtBhM,EFrIG,CACLtB,KAAM,yBEsILqN,GAAG,SAAS,SAACtJ,GACZlB,QAAQkB,MAAMA,GACdvC,OAAOK,MAAP,0BU5PMoQ,CAAc3Q,EAAU0B,EAAUV,EAAOZ,EAAM+P,EAAW1R,IAH9D,UAME,uBAAKwM,UAAU,mBAAf,UACE,qDACA,sBAAKA,UAAU,cAAf,SACE,wBACEvM,KAAK,OACLuM,UAAU,kDACVyE,YAAY,cACZC,SAAU,SAAC9K,GAAD,OACR7E,EZ0FT,CACLtB,KAAM,4BACNgF,OY5F8CmB,EAAEwG,OAAOoE,SAE3CG,UAAQ,SAId,uBAAK3E,UAAU,mBAAf,UACE,gDACA,sBAAKA,UAAU,cAAf,SACE,wBACEvM,KAAK,OACLuM,UAAU,kDACVyE,YAAY,aACZC,SAAU,SAAC9K,GAAD,OACR7E,EZmFT,CACLtB,KAAM,2BACN6R,MYrF6C1L,EAAEwG,OAAOoE,SAE1CG,UAAQ,SAId,yBAAQlR,KAAK,SAASuM,UAAU,mCAAhC,wBAGCoF,EACC,6CAAeF,EAAUzM,OAASyM,EAAUI,MAA5C,UACE,cAmCCxF,gBAjBS,SAAC/G,GACvB,IAAMkM,EAAWrF,GAAiB7G,GAC5BmM,EAAYrF,GAAkB9G,GAEpC,MAAO,CACLvF,QAASyF,EAAgBF,GACzBtC,SAAUiD,EAAiBX,GAC3BhD,MAAOuD,EAAcP,GACrB5D,KAAMgE,EAAaJ,GACnBkM,WACAC,YACAlB,UAAWiB,EAASU,SAAWT,EAAUS,OACzCR,aAAcF,EAASxM,QAAUwM,EAASK,MAC1CF,cAAeF,EAAUzM,QAAUyM,EAAUI,SAIlCxF,EA5BE,SAACC,GAChB,OACE,uBAAKC,UAAU,0BAAf,UACE,sBAAKA,UAAU,cAAf,uBACA,sBAAKA,UAAU,YAAf,SACGD,EAAMiE,SAAWA,GAASjE,GAAS,eAAC,GAAD,YCrF7BD,gBANS,SAAC/G,GACvB,MAAO,CACLtC,SAAUiD,EAAiBX,MAIhB+G,EAhCC,SAACC,GAUf,OATAgF,qBAAU,WACR,IAAMC,EAAkB,uCAAG,WAAOjF,GAAP,iBAAA/K,EAAA,6DACjBD,EAAuBgL,EAAvBhL,SAAU0B,EAAasJ,EAAbtJ,SADO,SAEnBE,EAAcF,EAAU1B,GAFL,uBAGnBsC,EAAkBZ,EAAU1B,GAHT,2CAAH,sDAKxBiQ,EAAmBjF,KAClB,CAACA,IAGF,uBAAKC,UAAU,UAAf,UACE,uBAAKA,UAAU,iBAAf,UACE,eAAC,GAAD,IACA,eAAC,GAAD,OAEF,eAAC,GAAD,IACA,uBAAKA,UAAU,iBAAf,UACE,eAAC,GAAD,IACA,eAAC,GAAD,OAEF,eAAC,GAAD,UCiBN,IAMeF,gBANS,SAAC/G,GACvB,MAAO,CACL6M,gBAAiB/L,EAAwBd,MAI9B+G,EA1Cf,SAAaC,GAwBX,OAvBAgF,qBAAU,WACR,IAAMC,EAAkB,uCAAG,WAAOjQ,GAAP,iBAAAC,EAAA,sEACNF,EAASC,GADH,cACnBI,EADmB,gBAEDA,EAAKO,IAAImQ,IAAIC,QAFZ,cAEnBhQ,EAFmB,gBAGnBL,EAAYN,EAAMJ,GAHC,wBAILc,EAAUV,EAAMW,EAAWf,GAJtB,0CAMvBE,OAAOK,MACL,0GAPqB,4CAWFkB,EAAarB,EAAMW,EAAWf,GAX5B,0CAavBE,OAAOK,MACL,6GAdqB,+DAAH,sDAmBxB0P,EAAmBjF,EAAMhL,YACxB,CAACgL,EAAMhL,WAGR,iCACE,eAAC,GAAD,IACCgL,EAAM6F,gBACL,eAAC,GAAD,IAEA,sBAAK5F,UAAU,kB,mBCyHvB,IAAM+F,GAAcC,aAAgB,CAClC7Q,KAnKF,WAAmC,IAArB4D,EAAoB,uDAAZ,GAAIkN,EAAQ,uCAChC,OAAQA,EAAOxS,MACb,IAAK,cACH,OAAO,2BAAKsF,GAAZ,IAAmB1D,WAAY4Q,EAAO5Q,aACxC,IAAK,sBACH,OAAO,2BAAK0D,GAAZ,IAAmBvF,QAASyS,EAAOzS,UACrC,IAAK,uBACH,OAAO,2BAAKuF,GAAZ,IAAmB9E,QAASgS,EAAOhS,UACrC,QACE,OAAO8E,IA2JXhD,MAvJF,WAAoC,IAArBgD,EAAoB,uDAAZ,GAAIkN,EAAQ,uCACjC,OAAQA,EAAOxS,MACb,IAAK,eACH,OAAO,2BAAKsF,GAAZ,IAAmBe,QAAQ,EAAMzD,SAAU4P,EAAO5P,WACpD,IAAK,uBACH,OAAO,2BAAK0C,GAAZ,IAAmB9E,QAASgS,EAAOhS,UACrC,QACE,OAAO8E,IAiJXtC,SA7IF,WAAuC,IAC1BuH,EADKjF,EAAoB,uDAAZ,GAAIkN,EAAQ,uCAGpC,OAAQA,EAAOxS,MACb,IAAK,kBACH,OAAO,2BAAKsF,GAAZ,IAAmBe,QAAQ,EAAMzD,SAAU4P,EAAO5P,WACpD,IAAK,0BACH,OAAO,2BACF0C,GADL,IAEEpF,gBAAiB,CAAEmG,QAAQ,EAAMkE,KAAMiI,EAAOtS,mBAElD,IAAK,uBACH,OAAO,2BACFoF,GADL,IAEElF,aAAc,CAAEiG,QAAQ,EAAMkE,KAAMiI,EAAOpS,gBAE/C,IAAK,oBACH,OAAO,2BAAKkF,GAAZ,IAAmBhF,UAAW,CAAE+F,QAAQ,EAAMkE,KAAMiI,EAAOlS,aAC7D,IAAK,mBACH,OAAO,2BAAKgF,GAAZ,IAAmBwI,iBAAiB,IACtC,IAAK,kBACH,OAAO,2BACFxI,GADL,IAEEwI,iBAAiB,EACjB5N,gBAAgB,2BACXoF,EAAMpF,iBADI,IAEbqK,KAAK,GAAD,oBAAMjF,EAAMpF,gBAAgBqK,MAA5B,CAAkCiI,EAAOxO,YAGnD,IAAK,eAYH,OALEuG,GADa,IAJPjF,EAAMlF,aAAamK,KAAKkI,WAC9B,SAACzO,GAAD,OAAWA,EAAM6D,KAAO2K,EAAOxO,MAAM6D,MAIjC,uBAAOvC,EAAMlF,aAAamK,MAA1B,CAAgCiI,EAAOxO,QAEpCsB,EAAMlF,aAAamK,KAGrB,2BACFjF,GADL,IAEEmI,cAAc,EACdrN,aAAa,2BACRkF,EAAMlF,cADC,IAEVmK,WAIN,IAAK,gBACH,OAAO,2BAAKjF,GAAZ,IAAmBmI,cAAc,IAEnC,IAAK,gCACH,OAAO,2BAAKnI,GAAZ,IAAmBf,aAAciO,EAAOhS,UAC1C,IAAK,gCACH,OAAO,2BAAK8E,GAAZ,IAAmBX,aAAc6N,EAAOhS,UAC1C,IAAK,mBACH,OAAO,2BAAK8E,GAAZ,IAAmB+L,iBAAiB,IACtC,IAAK,kBACH,OAAO,2BAAK/L,GAAZ,IAAmB+L,iBAAiB,IACtC,IAAK,+BACH,OAAO,2BAAK/L,GAAZ,IAAmBkL,mBAAoBgC,EAAOxN,SAChD,IAAK,gCACH,OAAO,2BAAKM,GAAZ,IAAmBoL,oBAAqB8B,EAAOxN,SACjD,IAAK,+BACH,OAAO,2BAAKM,GAAZ,IAAmBmL,mBAAoB+B,EAAOxN,SAChD,IAAK,gCACH,OAAO,2BAAKM,GAAZ,IAAmBqL,oBAAqB6B,EAAOxN,SACjD,IAAK,2BACH,OAAO,2BACFM,GADL,IAEEkM,SAAS,2BAAMlM,EAAMkM,UAAb,IAAuBxM,OAAQwN,EAAOxN,WAElD,IAAK,0BACH,OAAO,2BAAKM,GAAZ,IAAmBkM,SAAS,2BAAMlM,EAAMkM,UAAb,IAAuBK,MAAOW,EAAOX,UAClE,IAAK,mBACH,OAAO,2BACFvM,GADL,IAEEkM,SAAS,2BACJlM,EAAMkM,UADH,IAENxM,OAAQ,KACR6M,MAAO,KACPK,QAAQ,MAGd,IAAK,aAYH,OALE3H,GADa,IAJPjF,EAAMhF,UAAUiK,KAAKkI,WAC3B,SAACzO,GAAD,OAAWA,EAAM6D,KAAO2K,EAAOxO,MAAM6D,MAIjC,uBAAOvC,EAAMhF,UAAUiK,MAAvB,CAA6BiI,EAAOxO,QAEjCsB,EAAMhF,UAAUiK,KAGlB,2BACFjF,GADL,IAEEhF,UAAU,2BACLgF,EAAMhF,WADF,IAEPiK,SAEFiH,SAAS,2BACJlM,EAAMkM,UADH,IAENU,QAAQ,IAEVT,UAAU,2BACLnM,EAAMmM,WADF,IAEPS,QAAQ,MAGd,IAAK,4BACH,OAAO,2BACF5M,GADL,IAEEmM,UAAU,2BAAMnM,EAAMmM,WAAb,IAAwBzM,OAAQwN,EAAOxN,WAEpD,IAAK,2BACH,OAAO,2BACFM,GADL,IAEEmM,UAAU,2BAAMnM,EAAMmM,WAAb,IAAwBI,MAAOW,EAAOX,UAEnD,IAAK,oBACH,OAAO,2BACFvM,GADL,IAEEmM,UAAU,2BACLnM,EAAMmM,WADF,IAEPzM,OAAQ,KACR6M,MAAO,KACPK,QAAQ,MAGd,QACE,OAAO5M,MAUEgN,MCnKfI,IAASC,OACP,eAAC,IAAD,CAAUC,MCYHC,aAAYP,IDZnB,SACE,eAAC,GAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.b599ca9d.chunk.js","sourcesContent":["// WEB3\nexport function web3Loaded(connection) {\n  return {\n    type: 'WEB3_LOADED',\n    connection,\n  };\n}\n\nexport function web3AccountLoaded(account) {\n  return {\n    type: 'WEB3_ACCOUNT_LOADED',\n    account,\n  };\n}\n\n// TOKEN\nexport function tokenLoaded(contract) {\n  return {\n    type: 'TOKEN_LOADED',\n    contract,\n  };\n}\n\n// EXCHANGE\nexport function exchangeLoaded(contract) {\n  return {\n    type: 'EXCHANGE_LOADED',\n    contract,\n  };\n}\n\nexport function cancelledOrdersLoaded(cancelledOrders) {\n  return {\n    type: 'CANCELLED_ORDERS_LOADED',\n    cancelledOrders,\n  };\n}\n\nexport function filledOrdersLoaded(filledOrders) {\n  return {\n    type: 'FILLED_ORDERS_LOADED',\n    filledOrders,\n  };\n}\n\nexport function allOrdersLoaded(allOrders) {\n  return {\n    type: 'ALL_ORDERS_LOADED',\n    allOrders,\n  };\n}\n\n// Cancel Order\nexport function orderCancelling() {\n  return {\n    type: 'ORDER_CANCELLING'\n  }\n}\n\nexport function orderCancelled(order) {\n  return {\n    type: 'ORDER_CANCELLED',\n    order\n  }\n}\n\n// Fill Order\nexport function orderFilling() {\n  return {\n    type: 'ORDER_FILLING'\n  }\n}\n\nexport function orderFilled(order) {\n  return {\n    type: 'ORDER_FILLED',\n    order\n  }\n}\n\n// Balances\nexport function etherBalanceLoaded(balance) {\n  return {\n    type: 'ETHER_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function tokenBalanceLoaded(balance) {\n  return {\n    type: 'TOKEN_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function exchangeEtherBalanceLoaded(balance) {\n  return {\n    type: 'EXCHANGE_ETHER_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function exchangeTokenBalanceLoaded(balance) {\n  return {\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\n    balance\n  }\n}\n\nexport function balancesLoaded() {\n  return {\n    type: 'BALANCES_LOADED'\n  }\n}\n\nexport function balancesLoading() {\n  return {\n    type: 'BALANCES_LOADING'\n  }\n}\n\nexport function etherDepositAmountChanged(amount) {\n  return {\n    type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function etherWithdrawAmountChanged(amount) {\n  return {\n    type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function tokenDepositAmountChanged(amount) {\n  return {\n    type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function tokenWithdrawAmountChanged(amount) {\n  return {\n    type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\n    amount\n  }\n}\n\n\n// Buy Order\nexport function buyOrderAmountChanged(amount) {\n  return {\n    type: 'BUY_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function buyOrderPriceChanged(price) {\n  return {\n    type: 'BUY_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function buyOrderMaking(price) {\n  return {\n    type: 'BUY_ORDER_MAKING'\n  }\n}\n\n// Generic Order\nexport function orderMade(order) {\n  return {\n    type: 'ORDER_MADE',\n    order\n  }\n}\n\n// Sell Order\nexport function sellOrderAmountChanged(amount) {\n  return {\n    type: 'SELL_ORDER_AMOUNT_CHANGED',\n    amount\n  }\n}\n\nexport function sellOrderPriceChanged(price) {\n  return {\n    type: 'SELL_ORDER_PRICE_CHANGED',\n    price\n  }\n}\n\nexport function sellOrderMaking(price) {\n  return {\n    type: 'SELL_ORDER_MAKING'\n  }\n}\n","export const ETHER_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const GREEN = 'success';\nexport const RED = 'danger';\n\nexport const DECIMALS = (10 ** 18);\n\n// Shortcut to avoid passing around web3 connection\nexport const ether = (wei) => {\n  if (wei) {\n    return wei / DECIMALS; // 18 decimal places\n  }\n};\n\n// Tokens and ether havesame decimal resolution\nexport const tokens = ether;\n\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\n\n  return balance\n}\n","import Web3 from 'web3';\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded,\n  cancelledOrdersLoaded,\n  filledOrdersLoaded,\n  allOrdersLoaded,\n  orderCancelling,\n  orderCancelled,\n  orderFilling,\n  orderFilled,\n  etherBalanceLoaded,\n  tokenBalanceLoaded,\n  exchangeEtherBalanceLoaded,\n  exchangeTokenBalanceLoaded,\n  balancesLoaded,\n  balancesLoading,\n  buyOrderMaking,\n  sellOrderMaking,\n  orderMade,\n} from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nimport { ETHER_ADDRESS } from '../helpers';\n\nexport const loadWeb3 = async (dispatch) => {\n  if (typeof window.ethereum !== 'undefined') {\n    const web3 = new Web3(window.ethereum);\n    dispatch(web3Loaded(web3));\n    return web3;\n  } else {\n    window.alert('Please install MetaMask');\n    window.location.assign('https://metamask.io/');\n  }\n};\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts();\n  const account = await accounts[0];\n  if (typeof account !== 'undefined') {\n    dispatch(web3AccountLoaded(account));\n    return account;\n  } else {\n    window.alert('Please login with MetaMask');\n    return null;\n  }\n};\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(\n      Token.abi,\n      Token.networks[networkId].address\n    );\n    dispatch(tokenLoaded(token));\n    return token;\n  } catch (error) {\n    console.log(\n      'Contract not deployed to the current network. Please select another network with Metamask.'\n    );\n    return null;\n  }\n};\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(\n      Exchange.abi,\n      Exchange.networks[networkId].address\n    );\n    dispatch(exchangeLoaded(exchange));\n    return exchange;\n  } catch (error) {\n    console.log(\n      'Contract not deployed to the current network. Please select another network with Metamask.'\n    );\n    return null;\n  }\n};\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', {\n    fromBlock: 0,\n    toBlock: 'latest',\n  });\n  // Format cancelled orders\n  const cancelledOrders = cancelStream.map((event) => event.returnValues);\n  // Add cancelled orders to the redux store\n  dispatch(cancelledOrdersLoaded(cancelledOrders));\n\n  // Fetch filled orders with the \"Trade\" event stream\n  const tradeStream = await exchange.getPastEvents('Trade', {\n    fromBlock: 0,\n    toBlock: 'latest',\n  });\n  // Format filled orders\n  const filledOrders = tradeStream.map((event) => event.returnValues);\n  // Add cancelled orders to the redux store\n  dispatch(filledOrdersLoaded(filledOrders));\n\n  // Load order stream\n  const orderStream = await exchange.getPastEvents('Order', {\n    fromBlock: 0,\n    toBlock: 'latest',\n  });\n  // Format order stream\n  const allOrders = orderStream.map((event) => event.returnValues);\n  // Add open orders to the redux store\n  dispatch(allOrdersLoaded(allOrders));\n};\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods\n    .cancelOrder(order.id)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(orderCancelling());\n    })\n    .on('error', (error) => {\n      console.log(error);\n      window.alert('There was an error!');\n    });\n};\n\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.events.Cancel({}, (error, event) => {\n    dispatch(orderCancelled(event.returnValues));\n  });\n  exchange.events.Trade({}, (error, event) => {\n    dispatch(orderFilled(event.returnValues));\n  });\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded());\n  });\n\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded());\n  });\n\n  exchange.events.Order({}, (error, event) => {\n    dispatch(orderMade(event.returnValues));\n  });\n};\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n  exchange.methods\n    .fillOrder(order.id)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(orderFilling());\n    })\n    .on('error', (error) => {\n      console.log(error);\n      window.alert('There was an error!');\n    });\n};\n\nexport const loadBalances = async (\n  dispatch,\n  web3,\n  exchange,\n  token,\n  account\n) => {\n  if (typeof account !== 'undefined') {\n    // Ether balance in wallet\n    const etherBalance = await web3.eth.getBalance(account);\n    dispatch(etherBalanceLoaded(etherBalance));\n\n    // Token balance in wallet\n    const tokenBalance = await token.methods.balanceOf(account).call();\n    dispatch(tokenBalanceLoaded(tokenBalance));\n\n    // Ether balance in exchange\n    const exchangeEtherBalance = await exchange.methods\n      .balanceOf(ETHER_ADDRESS, account)\n      .call();\n    dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance));\n\n    // Token balance in exchange\n    const exchangeTokenBalance = await exchange.methods\n      .balanceOf(token.options.address, account)\n      .call();\n    dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance));\n\n    // Trigger all balances loaded\n    dispatch(balancesLoaded());\n  } else {\n    window.alert('Please login with MetaMask');\n  }\n};\n\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods\n    .depositEther()\n    .send({ from: account, value: web3.utils.toWei(amount, 'ether') })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading());\n    })\n    .on('error', (error) => {\n      console.error(error);\n      window.alert(`There was an error!`);\n    });\n};\n\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods\n    .withdrawEther(web3.utils.toWei(amount, 'ether'))\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading());\n    })\n    .on('error', (error) => {\n      console.error(error);\n      window.alert(`There was an error!`);\n    });\n};\n\nexport const depositToken = async (\n  dispatch,\n  exchange,\n  web3,\n  token,\n  amount,\n  account\n) => {\n  amount = web3.utils.toWei(amount, 'ether');\n\n  try {\n    await token.methods\n      .approve(exchange.options.address, amount)\n      .send({ from: account });\n    await exchange.methods\n      .depositToken(token.options.address, amount)\n      .send({ from: account });\n    dispatch(balancesLoading());\n  } catch (error) {\n    console.error(error);\n    window.alert(`There was an error!`);\n  }\n};\n\n// export const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n//   amount = web3.utils.toWei(amount, 'ether')\n\n//   token.methods.approve(exchange.options.address, amount).send({ from: account })\n//   .on('transactionHash', (hash) => {\n//     exchange.methods.depositToken(token.options.address, amount).send({ from: account })\n//     .on('transactionHash', (hash) => {\n//       dispatch(balancesLoading())\n//     })\n//     .on('error',(error) => {\n//       console.error(error)\n//       window.alert(`There was an error!`)\n//     })\n//   })\n// }\n\nexport const withdrawToken = (\n  dispatch,\n  exchange,\n  web3,\n  token,\n  amount,\n  account\n) => {\n  exchange.methods\n    .withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether'))\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading());\n    })\n    .on('error', (error) => {\n      console.error(error);\n      window.alert(`There was an error!`);\n    });\n};\n\nexport const makeBuyOrder = (\n  dispatch,\n  exchange,\n  token,\n  web3,\n  order,\n  account\n) => {\n  const tokenGet = token.options.address;\n  const amountGet = web3.utils.toWei(order.amount, 'ether');\n  const tokenGive = ETHER_ADDRESS;\n  const amountGive = web3.utils.toWei(\n    (order.amount * order.price).toString(),\n    'ether'\n  );\n\n  exchange.methods\n    .makeOrder(tokenGet, amountGet, tokenGive, amountGive)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(buyOrderMaking());\n    })\n    .on('error', (error) => {\n      console.error(error);\n      window.alert(`There was an error!`);\n    });\n};\n\nexport const makeSellOrder = (\n  dispatch,\n  exchange,\n  token,\n  web3,\n  order,\n  account\n) => {\n  const tokenGet = ETHER_ADDRESS;\n  const amountGet = web3.utils.toWei(\n    (order.amount * order.price).toString(),\n    'ether'\n  );\n  const tokenGive = token.options.address;\n  const amountGive = web3.utils.toWei(order.amount, 'ether');\n\n  exchange.methods\n    .makeOrder(tokenGet, amountGet, tokenGive, amountGive)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(sellOrderMaking());\n    })\n    .on('error', (error) => {\n      console.error(error);\n      window.alert(`There was an error!`);\n    });\n};\n","import { get, groupBy, reject, maxBy, minBy } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether,formatBalance } from '../helpers';\n\nconst account = (state) => get(state, 'web3.account');\nexport const accountSelector = createSelector(account, (a) => a);\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = (state) => get(state, 'token.loaded', false);\nexport const tokenLoadedSelector = createSelector(tokenLoaded, (tl) => tl);\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = (state) => get(state, 'exchange.loaded', false);\nexport const exchangeLoadedSelector = createSelector(\n  exchangeLoaded,\n  (el) => el\n);\n\nconst exchange = (state) => get(state, 'exchange.contract');\nexport const exchangeSelector = createSelector(exchange, (e) => e);\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => tl && el\n);\n\n// All Orders\nconst allOrdersLoaded = (state) =>\n  get(state, 'exchange.allOrders.loaded', false);\nconst allOrders = (state) => get(state, 'exchange.allOrders.data', []);\n\n// Cancelled orders\nconst cancelledOrdersLoaded = (state) =>\n  get(state, 'exchange.cancelledOrders.loaded', false);\nexport const cancelledOrdersLoadedSelector = createSelector(\n  cancelledOrdersLoaded,\n  (loaded) => loaded\n);\n\nconst cancelledOrders = (state) =>\n  get(state, 'exchange.cancelledOrders.data', []);\nexport const cancelledOrdersSelector = createSelector(\n  cancelledOrders,\n  (o) => o\n);\n\n// Filled Orders\nconst filledOrdersLoaded = (state) =>\n  get(state, 'exchange.filledOrders.loaded', false);\nexport const filledOrdersLoadedSelector = createSelector(\n  filledOrdersLoaded,\n  (loaded) => loaded\n);\n\nconst filledOrders = (state) => get(state, 'exchange.filledOrders.data', []);\nexport const filledOrdersSelector = createSelector(filledOrders, (orders) => {\n  // Sort orders by date ascending for price comparison\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp);\n  // Decorate the orders\n  orders = decorateFilledOrders(orders);\n  // Sort orders by date descending for display\n  orders = orders.sort((a, b) => b.timestamp - a.timestamp);\n  return orders;\n});\n\nconst decorateFilledOrders = (orders) => {\n  // Track previous order to compare history\n  let previousOrder = orders[0];\n  return orders.map((order) => {\n    order = decorateOrder(order);\n    order = decorateFilledOrder(order, previousOrder);\n    previousOrder = order; // Update the previous order once it's decorated\n    return order;\n  });\n};\n\nconst decorateOrder = (order) => {\n  let etherAmount;\n  let tokenAmount;\n\n  if (order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000;\n  let tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n\n  return {\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D'),\n  };\n};\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return {\n    ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder),\n  };\n};\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if (previousOrder.id === orderId) {\n    return GREEN;\n  }\n\n  // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n  if (previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN; // success\n  } else {\n    return RED; // danger\n  }\n};\n\nconst openOrders = (state) => {\n  const all = allOrders(state);\n  const filled = filledOrders(state);\n  const cancelled = cancelledOrders(state);\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id);\n    const orderCancelled = cancelled.some((o) => o.id === order.id);\n    return orderFilled || orderCancelled;\n  });\n\n  return openOrders;\n};\n\nconst orderBookLoaded = (state) =>\n  cancelledOrdersLoaded(state) &&\n  filledOrdersLoaded(state) &&\n  allOrdersLoaded(state);\nexport const orderBookLoadedSelector = createSelector(\n  orderBookLoaded,\n  (loaded) => loaded\n);\n\n// Create the order book\nexport const orderBookSelector = createSelector(openOrders, (orders) => {\n  // Decorate orders\n  orders = decorateOrderBookOrders(orders);\n  // Group orders by \"orderType\"\n  orders = groupBy(orders, 'orderType');\n  // Fetch buy orders\n  const buyOrders = get(orders, 'buy', []);\n  // Sort buy orders by token price\n  orders = {\n    ...orders,\n    buyOrders: buyOrders.sort((a, b) => b.tokenPrice - a.tokenPrice),\n  };\n  // Fetch sell orders\n  const sellOrders = get(orders, 'sell', []);\n  // Sort sell orders by token price\n  orders = {\n    ...orders,\n    sellOrders: sellOrders.sort((a, b) => b.tokenPrice - a.tokenPrice),\n  };\n  return orders;\n});\n\nconst decorateOrderBookOrders = (orders) => {\n  return orders.map((order) => {\n    order = decorateOrder(order);\n    order = decorateOrderBookOrder(order);\n    return order;\n  });\n};\n\nconst decorateOrderBookOrder = (order) => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return {\n    ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy',\n  };\n};\n\nexport const myFilledOrdersLoadedSelector = createSelector(\n  filledOrdersLoaded,\n  (loaded) => loaded\n);\n\nexport const myFilledOrdersSelector = createSelector(\n  account,\n  filledOrders,\n  (account, orders) => {\n    // Find our orders\n    orders = orders.filter((o) => o.user === account || o.userFill === account);\n    // Sort by date ascending\n    orders = orders.sort((a, b) => a.timestamp - b.timestamp);\n    // Decorate orders - add display attributes\n    orders = decorateMyFilledOrders(orders, account);\n    return orders;\n  }\n);\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return orders.map((order) => {\n    order = decorateOrder(order);\n    order = decorateMyFilledOrder(order, account);\n    return order;\n  });\n};\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account;\n\n  let orderType;\n  if (myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy';\n  }\n\n  return {\n    ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderSign: orderType === 'buy' ? '+' : '-',\n  };\n};\n\nexport const myOpenOrdersLoadedSelector = createSelector(\n  orderBookLoaded,\n  (loaded) => loaded\n);\n\nexport const myOpenOrdersSelector = createSelector(\n  account,\n  openOrders,\n  (account, orders) => {\n    // Filter orders created by current account\n    orders = orders.filter((o) => o.user === account);\n    // Decorate orders - add display attributes\n    orders = decorateMyOpenOrders(orders);\n    // Sort orders by date descending\n    orders = orders.sort((a, b) => b.timestamp - a.timestamp);\n    return orders;\n  }\n);\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return orders.map((order) => {\n    order = decorateOrder(order);\n    order = decorateMyOpenOrder(order, account);\n    return order;\n  });\n};\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n\n  return {\n    ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n  };\n};\n\nexport const priceChartLoadedSelector = createSelector(\n  filledOrdersLoaded,\n  (loaded) => loaded\n);\n\nexport const priceChartSelector = createSelector(filledOrders, (orders) => {\n  // Sort orders by date ascending to compare history\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp);\n  // Decorate orders - add display attributes\n  orders = orders.map((o) => decorateOrder(o));\n  // Get last 2 order for final price & price change\n  let secondLastOrder, lastOrder;\n  [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length);\n  // get last order price\n  const lastPrice = get(lastOrder, 'tokenPrice', 0);\n  // get second last order price\n  const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0);\n\n  return {\n    lastPrice,\n    lastPriceChange: lastPrice >= secondLastPrice ? '+' : '-',\n    series: [\n      {\n        data: buildGraphData(orders),\n      },\n    ],\n  };\n});\n\nconst buildGraphData = (orders) => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, (o) =>\n    moment.unix(o.timestamp).startOf('hour').format()\n  );\n  // Get each hour where data exists\n  const hours = Object.keys(orders);\n  // Build the graph series\n  const graphData = hours.map((hour) => {\n    // Fetch all the orders from current hour\n    const group = orders[hour];\n    // Calculate price values - open, high, low, close\n    const open = group[0]; // first order\n    const high = maxBy(group, 'tokenPrice'); // high price\n    const low = minBy(group, 'tokenPrice'); // low price\n    const close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice],\n    };\n  });\n\n  return graphData;\n};\n\nconst orderCancelling = (state) =>\n  get(state, 'exchange.orderCancelling', false);\nexport const orderCancellingSelector = createSelector(\n  orderCancelling,\n  (status) => status\n);\n\nconst orderFilling = (state) => get(state, 'exchange.orderFilling', false);\nexport const orderFillingSelector = createSelector(\n  orderFilling,\n  (status) => status\n);\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n\n","import { connect } from 'react-redux';\nimport { accountSelector } from '../store/selectors';\n\nconst Navbar = (props) => {\n  return (\n    <nav className='navbar navbar-expand-lg navbar-dark bg-primary'>\n      <a className='navbar-brand' style={{paddingLeft: '10px'}} href='#/'>\n        DApp Token Exchange\n      </a>\n      <button\n        className='navbar-toggler'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarNavDropdown'\n        aria-controls='navbarNavDropdown'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <ul className='navbar-nav ml-auto'>\n        <li className='nav-item'>\n          <a\n            className='nav-link small'\n            href={`https://etherscan.io/address/${props.account}`}\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            {props.account}\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    account: accountSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Navbar);\n","const Spinner = ({ type }) => {\n  if (type === 'table') {\n    return <tbody className='spinner-border text-light text-center'></tbody>;\n  } else {\n    return <div className='spinner-border text-light text-center'></div>;\n  }\n};\n\nexport default Spinner;\n","import { connect } from 'react-redux';\nimport Spinner from './Spinner';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport {\n  orderBookSelector,\n  orderBookLoadedSelector,\n  exchangeSelector,\n  accountSelector,\n  orderFillingSelector,\n} from '../store/selectors';\nimport { fillOrder } from '../store/interactions';\n\nconst renderOrder = (order, props) => {\n  const { dispatch, exchange, account } = props;\n\n  return (\n    <OverlayTrigger\n      key={order.id}\n      placement='top'\n      overlay={\n        <Tooltip id={order.id}>\n          {`Click here to ${order.orderFillAction}`}\n        </Tooltip>\n      }\n    >\n      <tr\n        key={order.id}\n        className='order-book-order'\n        onClick={(e) => fillOrder(dispatch, exchange, order, account)}\n      >\n        <td>{order.tokenAmount}</td>\n        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n        <td>{order.etherAmount}</td>\n      </tr>\n    </OverlayTrigger>\n  );\n};\n\nconst showOrderBook = (props) => {\n  const { orderBook } = props;\n\n  return (\n    <tbody>\n      {orderBook.sellOrders.map((order) => renderOrder(order, props))}\n      <tr>\n        <th>DAPP</th>\n        <th>DAPP/ETH</th>\n        <th>ETH</th>\n      </tr>\n      {orderBook.buyOrders.map((order) => renderOrder(order, props))}\n    </tbody>\n  );\n};\n\nconst OrderBook = (props) => {\n  return (\n    <div className='vertical'>\n      <div className='card bg-dark text-white'>\n        <div className='card-header'>Order Book</div>\n        <div className='card-body order-book'>\n          <table className='table table-dark table-sm small'>\n            {props.showOrderBook ? (\n              showOrderBook(props)\n            ) : (\n              <Spinner type='table' />\n            )}\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const orderBookLoaded = orderBookLoadedSelector(state);\n  const orderFilling = orderFillingSelector(state);\n\n  return {\n    orderBook: orderBookSelector(state),\n    showOrderBook: orderBookLoaded && !orderFilling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(OrderBook);\n","import { connect } from 'react-redux';\nimport Spinner from './Spinner';\nimport {\n  filledOrdersLoadedSelector,\n  filledOrdersSelector,\n} from '../store/selectors';\n\nconst showFilledOrders = (filledOrders) => {\n  return (\n    <tbody>\n      {filledOrders.map((order) => {\n        return (\n          <tr className={`order-${order.id}`} key={order.id}>\n            <td className='text-muted'>{order.formattedTimestamp}</td>\n            <td>{order.tokenAmount}</td>\n            <td className={`text-${order.tokenPriceClass}`}>\n              {order.tokenPrice}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n\nconst Trades = (props) => {\n  return (\n    <div className='vertical'>\n      <div className='card bg-dark text-white'>\n        <div className='card-header'>Trades</div>\n        <div className='card-body'>\n          <table className='table table-dark table-sm small'>\n            <thead>\n              <tr>\n                <th>Time</th>\n                <th>DAPP</th>\n                <th>DAPP/ETH</th>\n              </tr>\n            </thead>\n            {props.filledOrdersLoaded ? (\n              showFilledOrders(props.filledOrders)\n            ) : (\n              <Spinner type='table' />\n            )}\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    filledOrdersLoaded: filledOrdersLoadedSelector(state),\n    filledOrders: filledOrdersSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Trades);\n","import { connect } from 'react-redux';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport Spinner from './Spinner';\nimport {\n  myFilledOrdersLoadedSelector,\n  myFilledOrdersSelector,\n  myOpenOrdersLoadedSelector,\n  myOpenOrdersSelector,\n  exchangeSelector,\n  accountSelector,\n  orderCancellingSelector,\n} from '../store/selectors';\nimport { cancelOrder } from '../store/interactions';\n\nconst showMyFilledOrders = (myFilledOrders) => {\n  return (\n    <tbody>\n      {myFilledOrders.map((order) => {\n        return (\n          <tr key={order.id}>\n            <td className='text-muted'>{order.formattedTimestamp}</td>\n            <td className={`text-${order.orderTypeClass}`}>\n              {order.orderSign}\n              {order.tokenAmount}\n            </td>\n            <td className={`text-${order.orderTypeClass}`}>\n              {order.tokenPrice}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n\nconst showMyOpenOrders = (props) => {\n  const { myOpenOrders, dispatch, exchange, account } = props;\n  return (\n    <tbody>\n      {myOpenOrders.map((order) => {\n        return (\n          <tr key={order.id}>\n            <td className={`text-${order.orderTypeClass}`}>\n              {order.tokenAmount}\n            </td>\n            <td className={`text-${order.orderTypeClass}`}>\n              {order.tokenPrice}\n            </td>\n            <td\n              className='text-muted cancel-order'\n              onClick={(e) => {\n                cancelOrder(dispatch, exchange, order, account);\n              }}\n            >\n              X\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n\nconst MyTransactions = (props) => {\n  return (\n    <div className='card bg-dark text-white'>\n      <div className='card-header'>My Transactions</div>\n      <div className='card-body'>\n        <Tabs defaultActiveKey='trades' className='bg-dark text-white'>\n          <Tab eventKey='trades' title='Trades' className='bg-dark'>\n            <table className='table table-dark table-sm small'>\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>DAPP</th>\n                  <th>DAPP/ETH</th>\n                </tr>\n              </thead>\n              {props.showMyFilledOrders ? (\n                showMyFilledOrders(props.myFilledOrders)\n              ) : (\n                <Spinner type='table' />\n              )}\n            </table>\n          </Tab>\n          <Tab eventKey='orders' title='Orders'>\n            <table className='table table-dark table-sm small'>\n              <thead>\n                <tr>\n                  <th>Amount</th>\n                  <th>DAPP/ETH</th>\n                  <th>Cancel</th>\n                </tr>\n              </thead>\n              {props.showMyOpenOrders ? (\n                showMyOpenOrders(props)\n              ) : (\n                <Spinner type='table' />\n              )}\n            </table>\n          </Tab>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const myOpenOrdersLoaded = myOpenOrdersLoadedSelector(state);\n  const orderCancelling = orderCancellingSelector(state);\n  return {\n    myFilledOrders: myFilledOrdersSelector(state),\n    showMyFilledOrders: myFilledOrdersLoadedSelector(state),\n    myOpenOrders: myOpenOrdersSelector(state),\n    showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\n    exchange: exchangeSelector(state),\n    account: accountSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(MyTransactions);\n","export const chartOptions = {\n    chart: {\n      animations: { enabled: false },\n      toolbar: { show: false },\n      width: '100px'\n    },\n    tooltip: {\n      enabled: true,\n      theme: false,\n      style: {\n        fontSize: '12px',\n        fontFamily: undefined\n      },\n      x: {\n          show: false,\n          format: 'dd MMM',\n          formatter: undefined,\n      },\n      y: {\n        show: true,\n        title: 'price'\n      },\n      marker: {\n        show: false,\n      },\n      items: {\n         display: 'flex',\n      },\n      fixed: {\n          enabled: false,\n          position: 'topRight',\n          offsetX: 0,\n          offsetY: 0,\n      },\n    },\n    xaxis: {\n      type: 'datetime',\n      labels: {\n        show: true,\n        style: {\n            colors: '#fff',\n            fontSize: '8px',\n            cssClass: 'apexcharts-xaxis-label',\n        },\n      },\n    },\n    yaxis: {\n      labels: {\n        show: true,\n        minWidth: 0,\n        maxWidth: 160,\n        style: {\n          color: '#fff',\n          fontSize: '8px',\n          cssClass: 'apexcharts-yaxis-label',\n        },\n        offsetX: 0,\n        offsetY: 0,\n        rotate: 0,\n      }\n    }\n  }\n  \n  export const dummyData = [\n    {\n      data: [\n        {\n          x: new Date(1538778600000),\n          y: [6629.81, 6650.5, 6623.04, 6633.33]\n        },\n        {\n          x: new Date(1538780400000),\n          y: [6632.01, 6643.59, 6620, 6630.11]\n        },\n        {\n          x: new Date(1538782200000),\n          y: [6630.71, 6648.95, 6623.34, 6635.65]\n        },\n        {\n          x: new Date(1538784000000),\n          y: [6635.65, 6651, 6629.67, 6638.24]\n        },\n        {\n          x: new Date(1538785800000),\n          y: [6638.24, 6640, 6620, 6624.47]\n        },\n        {\n          x: new Date(1538787600000),\n          y: [6624.53, 6636.03, 6621.68, 6624.31]\n        },\n        {\n          x: new Date(1538789400000),\n          y: [6624.61, 6632.2, 6617, 6626.02]\n        },\n        {\n          x: new Date(1538791200000),\n          y: [6627, 6627.62, 6584.22, 6603.02]\n        },\n        {\n          x: new Date(1538793000000),\n          y: [6605, 6608.03, 6598.95, 6604.01]\n        },\n        {\n          x: new Date(1538794800000),\n          y: [6604.5, 6614.4, 6602.26, 6608.02]\n        },\n        {\n          x: new Date(1538796600000),\n          y: [6608.02, 6610.68, 6601.99, 6608.91]\n        },\n        {\n          x: new Date(1538798400000),\n          y: [6608.91, 6618.99, 6608.01, 6612]\n        },\n        {\n          x: new Date(1538800200000),\n          y: [6612, 6615.13, 6605.09, 6612]\n        },\n        {\n          x: new Date(1538802000000),\n          y: [6612, 6624.12, 6608.43, 6622.95]\n        },\n        {\n          x: new Date(1538803800000),\n          y: [6623.91, 6623.91, 6615, 6615.67]\n        },\n        {\n          x: new Date(1538805600000),\n          y: [6618.69, 6618.74, 6610, 6610.4]\n        },\n        {\n          x: new Date(1538807400000),\n          y: [6611, 6622.78, 6610.4, 6614.9]\n        },\n        {\n          x: new Date(1538809200000),\n          y: [6614.9, 6626.2, 6613.33, 6623.45]\n        },\n        {\n          x: new Date(1538811000000),\n          y: [6623.48, 6627, 6618.38, 6620.35]\n        },\n        {\n          x: new Date(1538812800000),\n          y: [6619.43, 6620.35, 6610.05, 6615.53]\n        },\n        {\n          x: new Date(1538814600000),\n          y: [6615.53, 6617.93, 6610, 6615.19]\n        },\n        {\n          x: new Date(1538816400000),\n          y: [6615.19, 6621.6, 6608.2, 6620]\n        },\n        {\n          x: new Date(1538818200000),\n          y: [6619.54, 6625.17, 6614.15, 6620]\n        },\n        {\n          x: new Date(1538820000000),\n          y: [6620.33, 6634.15, 6617.24, 6624.61]\n        },\n        {\n          x: new Date(1538821800000),\n          y: [6625.95, 6626, 6611.66, 6617.58]\n        },\n        {\n          x: new Date(1538823600000),\n          y: [6619, 6625.97, 6595.27, 6598.86]\n        },\n        {\n          x: new Date(1538825400000),\n          y: [6598.86, 6598.88, 6570, 6587.16]\n        },\n        {\n          x: new Date(1538827200000),\n          y: [6588.86, 6600, 6580, 6593.4]\n        },\n        {\n          x: new Date(1538829000000),\n          y: [6593.99, 6598.89, 6585, 6587.81]\n        },\n        {\n          x: new Date(1538830800000),\n          y: [6587.81, 6592.73, 6567.14, 6578]\n        },\n        {\n          x: new Date(1538832600000),\n          y: [6578.35, 6581.72, 6567.39, 6579]\n        },\n        {\n          x: new Date(1538834400000),\n          y: [6579.38, 6580.92, 6566.77, 6575.96]\n        },\n        {\n          x: new Date(1538836200000),\n          y: [6575.96, 6589, 6571.77, 6588.92]\n        },\n        {\n          x: new Date(1538838000000),\n          y: [6588.92, 6594, 6577.55, 6589.22]\n        },\n        {\n          x: new Date(1538839800000),\n          y: [6589.3, 6598.89, 6589.1, 6596.08]\n        },\n        {\n          x: new Date(1538841600000),\n          y: [6597.5, 6600, 6588.39, 6596.25]\n        },\n        {\n          x: new Date(1538843400000),\n          y: [6598.03, 6600, 6588.73, 6595.97]\n        },\n        {\n          x: new Date(1538845200000),\n          y: [6595.97, 6602.01, 6588.17, 6602]\n        },\n        {\n          x: new Date(1538847000000),\n          y: [6602, 6607, 6596.51, 6599.95]\n        },\n        {\n          x: new Date(1538848800000),\n          y: [6600.63, 6601.21, 6590.39, 6591.02]\n        },\n        {\n          x: new Date(1538850600000),\n          y: [6591.02, 6603.08, 6591, 6591]\n        },\n        {\n          x: new Date(1538852400000),\n          y: [6591, 6601.32, 6585, 6592]\n        },\n        {\n          x: new Date(1538854200000),\n          y: [6593.13, 6596.01, 6590, 6593.34]\n        },\n        {\n          x: new Date(1538856000000),\n          y: [6593.34, 6604.76, 6582.63, 6593.86]\n        },\n        {\n          x: new Date(1538857800000),\n          y: [6593.86, 6604.28, 6586.57, 6600.01]\n        },\n        {\n          x: new Date(1538859600000),\n          y: [6601.81, 6603.21, 6592.78, 6596.25]\n        },\n        {\n          x: new Date(1538861400000),\n          y: [6596.25, 6604.2, 6590, 6602.99]\n        },\n        {\n          x: new Date(1538863200000),\n          y: [6602.99, 6606, 6584.99, 6587.81]\n        },\n        {\n          x: new Date(1538865000000),\n          y: [6587.81, 6595, 6583.27, 6591.96]\n        },\n        {\n          x: new Date(1538866800000),\n          y: [6591.97, 6596.07, 6585, 6588.39]\n        },\n        {\n          x: new Date(1538868600000),\n          y: [6587.6, 6598.21, 6587.6, 6594.27]\n        },\n        {\n          x: new Date(1538870400000),\n          y: [6596.44, 6601, 6590, 6596.55]\n        },\n        {\n          x: new Date(1538872200000),\n          y: [6598.91, 6605, 6596.61, 6600.02]\n        },\n        {\n          x: new Date(1538874000000),\n          y: [6600.55, 6605, 6589.14, 6593.01]\n        },\n        {\n          x: new Date(1538875800000),\n          y: [6593.15, 6605, 6592, 6603.06]\n        },\n        {\n          x: new Date(1538877600000),\n          y: [6603.07, 6604.5, 6599.09, 6603.89]\n        },\n        {\n          x: new Date(1538879400000),\n          y: [6604.44, 6604.44, 6600, 6603.5]\n        },\n        {\n          x: new Date(1538881200000),\n          y: [6603.5, 6603.99, 6597.5, 6603.86]\n        },\n        {\n          x: new Date(1538883000000),\n          y: [6603.85, 6605, 6600, 6604.07]\n        },\n        {\n          x: new Date(1538884800000),\n          y: [6604.98, 6606, 6604.07, 6606]\n        },\n      ]\n    }\n  ]\n  ","import { connect } from 'react-redux'\nimport Chart from 'react-apexcharts'\nimport Spinner from './Spinner'\nimport { chartOptions } from './PriceChart.config'\nimport {\n  priceChartLoadedSelector,\n  priceChartSelector\n} from '../store/selectors'\n\nconst priceSymbol = (lastPriceChange) => {\n  let output\n  if(lastPriceChange === '+') {\n    output = <span className=\"text-success\">&#9650;</span> // Green up tiangle\n  } else {\n    output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\n  }\n  return(output)\n}\n\nconst showPriceChart = (priceChart) => {\n  return(\n    <div className=\"price-chart\">\n      <div className=\"price\">\n        <h4>DAPP/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\n      </div>\n      <Chart options={chartOptions} series={priceChart.series} type='candlestick' width='100%' height='100%' />\n    </div>\n  )\n}\n\nconst PriceChart = (props) => {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          Price Chart\n        </div>\n        <div className=\"card-body\">\n          {props.priceChartLoaded ? showPriceChart(props.priceChart) : <Spinner />}\n        </div>\n      </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    priceChartLoaded: priceChartLoadedSelector(state),\n    priceChart: priceChartSelector(state),\n  }\n}\n\nexport default connect(mapStateToProps)(PriceChart)","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport Spinner from './Spinner';\nimport {\n  loadBalances,\n  depositEther,\n  depositToken,\n  withdrawEther,\n  withdrawToken,\n} from '../store/interactions';\nimport {\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  web3Selector,\n  etherBalanceSelector,\n  tokenBalanceSelector,\n  exchangeEtherBalanceSelector,\n  exchangeTokenBalanceSelector,\n  balancesLoadingSelector,\n  etherDepositAmountSelector,\n  etherWithdrawAmountSelector,\n  tokenDepositAmountSelector,\n  tokenWithdrawAmountSelector,\n} from '../store/selectors';\nimport {\n  etherDepositAmountChanged,\n  etherWithdrawAmountChanged,\n  tokenDepositAmountChanged,\n  tokenWithdrawAmountChanged,\n} from '../store/actions';\n\nconst showForm = (props) => {\n  const {\n    dispatch,\n    exchange,\n    web3,\n    account,\n    etherBalance,\n    tokenBalance,\n    exchangeEtherBalance,\n    exchangeTokenBalance,\n    etherDepositAmount,\n    token,\n    tokenDepositAmount,\n    etherWithdrawAmount,\n    tokenWithdrawAmount,\n  } = props;\n\n  return (\n    <Tabs defaultActiveKey='deposit' className='bg-dark text-white'>\n      <Tab eventKey='deposit' title='Deposit' className='bg-dark'>\n        <table className='table table-dark table-sm small'>\n          <thead>\n            <tr>\n              <th>Token</th>\n              <th>Wallet</th>\n              <th>Exchange</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>ETH</td>\n              <td>{etherBalance}</td>\n              <td>{exchangeEtherBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form\n          className='row'\n          onSubmit={(event) => {\n            event.preventDefault();\n            depositEther(dispatch, exchange, web3, etherDepositAmount, account);\n          }}\n        >\n          <div className='col-12 col-sm pr-sm-2'>\n            <input\n              type='text'\n              placeholder='ETH Amount'\n              onChange={(e) =>\n                dispatch(etherDepositAmountChanged(e.target.value))\n              }\n              className='form-control form-control-sm bg-dark text-white'\n              required\n            />\n          </div>\n          <div className='col-12 col-sm-auto pl-sm-0'>\n            <button type='submit' className='btn btn-primary btn-block btn-sm'>\n              Deposit\n            </button>\n          </div>\n        </form>\n\n        <table className='table table-dark table-sm small'>\n          <tbody>\n            <tr>\n              <td>DAPP</td>\n              <td>{tokenBalance}</td>\n              <td>{exchangeTokenBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form\n          className='row'\n          onSubmit={(event) => {\n            event.preventDefault();\n            depositToken(\n              dispatch,\n              exchange,\n              web3,\n              token,\n              tokenDepositAmount,\n              account\n            );\n          }}\n        >\n          <div className='col-12 col-sm pr-sm-2'>\n            <input\n              type='text'\n              placeholder='DAPP Amount'\n              onChange={(e) =>\n                dispatch(tokenDepositAmountChanged(e.target.value))\n              }\n              className='form-control form-control-sm bg-dark text-white'\n              required\n            />\n          </div>\n          <div className='col-12 col-sm-auto pl-sm-0'>\n            <button type='submit' className='btn btn-primary btn-block btn-sm'>\n              Deposit\n            </button>\n          </div>\n        </form>\n      </Tab>\n\n      <Tab eventKey='withdraw' title='Withdraw' className='bg-dark'>\n        <table className='table table-dark table-sm small'>\n          <thead>\n            <tr>\n              <th>Token</th>\n              <th>Wallet</th>\n              <th>Exchange</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>ETH</td>\n              <td>{etherBalance}</td>\n              <td>{exchangeEtherBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form\n          className='row'\n          onSubmit={(event) => {\n            event.preventDefault();\n            withdrawEther(\n              dispatch,\n              exchange,\n              web3,\n              etherWithdrawAmount,\n              account\n            );\n          }}\n        >\n          <div className='col-12 col-sm pr-sm-2'>\n            <input\n              type='text'\n              placeholder='ETH Amount'\n              onChange={(e) =>\n                dispatch(etherWithdrawAmountChanged(e.target.value))\n              }\n              className='form-control form-control-sm bg-dark text-white'\n              required\n            />\n          </div>\n          <div className='col-12 col-sm-auto pl-sm-0'>\n            <button type='submit' className='btn btn-primary btn-block btn-sm'>\n              Withdraw\n            </button>\n          </div>\n        </form>\n\n        <table className='table table-dark table-sm small'>\n          <tbody>\n            <tr>\n              <td>DAPP</td>\n              <td>{tokenBalance}</td>\n              <td>{exchangeTokenBalance}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <form\n          className='row'\n          onSubmit={(event) => {\n            event.preventDefault();\n            withdrawToken(\n              dispatch,\n              exchange,\n              web3,\n              token,\n              tokenWithdrawAmount,\n              account\n            );\n          }}\n        >\n          <div className='col-12 col-sm pr-sm-2'>\n            <input\n              type='text'\n              placeholder='DAPP Amount'\n              onChange={(e) =>\n                dispatch(tokenWithdrawAmountChanged(e.target.value))\n              }\n              className='form-control form-control-sm bg-dark text-white'\n              required\n            />\n          </div>\n          <div className='col-12 col-sm-auto pl-sm-0'>\n            <button type='submit' className='btn btn-primary btn-block btn-sm'>\n              Withdraw\n            </button>\n          </div>\n        </form>\n      </Tab>\n    </Tabs>\n  );\n};\n\nconst Balance = (props) => {\n  useEffect(() => {\n    const loadBlockchainData = async (props) => {\n      const { dispatch, web3, exchange, token, account } = props;\n      await loadBalances(dispatch, web3, exchange, token, account);\n    };\n    loadBlockchainData(props);\n  }, [props]);\n\n  return (\n    <div className='card bg-dark text-white'>\n      <div className='card-header'>Balance</div>\n      <div className='card-body'>{props.showForm ? showForm(props) : <Spinner />}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n    \n  const balancesLoading = balancesLoadingSelector(state);\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    etherBalance: etherBalanceSelector(state),\n    tokenBalance: tokenBalanceSelector(state),\n    exchangeEtherBalance: exchangeEtherBalanceSelector(state),\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\n    balancesLoading,\n    showForm: !balancesLoading,\n    etherDepositAmount: etherDepositAmountSelector(state),\n    etherWithdrawAmount: etherWithdrawAmountSelector(state),\n    tokenDepositAmount: tokenDepositAmountSelector(state),\n    tokenWithdrawAmount: tokenWithdrawAmountSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Balance);\n","import { connect } from 'react-redux';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport Spinner from './Spinner';\nimport {\n  exchangeSelector,\n  tokenSelector,\n  accountSelector,\n  web3Selector,\n  buyOrderSelector,\n  sellOrderSelector,\n} from '../store/selectors';\nimport {\n  buyOrderAmountChanged,\n  buyOrderPriceChanged,\n  sellOrderAmountChanged,\n  sellOrderPriceChanged,\n} from '../store/actions';\nimport { makeBuyOrder, makeSellOrder } from '../store/interactions';\n\nconst showForm = (props) => {\n  const {\n    dispatch,\n    buyOrder,\n    exchange,\n    token,\n    web3,\n    account,\n    sellOrder,\n    showBuyTotal,\n    showSellTotal,\n  } = props;\n\n  return (\n    <Tabs defaultActiveKey='buy' className='bg-dark text-white'>\n      <Tab eventKey='buy' title='Buy' className='bg-dark'>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account);\n          }}\n        >\n          <div className='form-group small'>\n            <label>Buy Amount (DAPP)</label>\n            <div className='input-group'>\n              <input\n                type='text'\n                className='form-control form-control-sm bg-dark text-white'\n                placeholder='Buy Amount'\n                onChange={(e) =>\n                  dispatch(buyOrderAmountChanged(e.target.value))\n                }\n                required\n              />\n            </div>\n          </div>\n          <div className='form-group small'>\n            <label>Buy Price</label>\n            <div className='input-group'>\n              <input\n                type='text'\n                className='form-control form-control-sm bg-dark text-white'\n                placeholder='Buy Price'\n                onChange={(e) => dispatch(buyOrderPriceChanged(e.target.value))}\n                required\n              />\n            </div>\n          </div>\n          <button type='submit' className='btn btn-primary btn-sm btn-block'>\n            Buy Order\n          </button>\n          {showBuyTotal ? (\n            <small>Total: {buyOrder.amount * buyOrder.price} ETH</small>\n          ) : null}\n        </form>\n      </Tab>\n\n      <Tab eventKey='sell' title='Sell' className='bg-dark'>\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            makeSellOrder(dispatch, exchange, token, web3, sellOrder, account);\n          }}\n        >\n          <div className='form-group small'>\n            <label>Buy Sell (DAPP)</label>\n            <div className='input-group'>\n              <input\n                type='text'\n                className='form-control form-control-sm bg-dark text-white'\n                placeholder='Sell amount'\n                onChange={(e) =>\n                  dispatch(sellOrderAmountChanged(e.target.value))\n                }\n                required\n              />\n            </div>\n          </div>\n          <div className='form-group small'>\n            <label>Sell Price</label>\n            <div className='input-group'>\n              <input\n                type='text'\n                className='form-control form-control-sm bg-dark text-white'\n                placeholder='Sell Price'\n                onChange={(e) =>\n                  dispatch(sellOrderPriceChanged(e.target.value))\n                }\n                required\n              />\n            </div>\n          </div>\n          <button type='submit' className='btn btn-primary btn-sm btn-block'>\n            Sell Order\n          </button>\n          {showSellTotal ? (\n            <small>Total: {sellOrder.amount * sellOrder.price} ETH</small>\n          ) : null}\n        </form>\n      </Tab>\n    </Tabs>\n  );\n};\n\nconst NewOrder = (props) => {\n  return (\n    <div className='card bg-dark text-white'>\n      <div className='card-header'>New Order</div>\n      <div className='card-body'>\n        {props.showForm ? showForm(props) : <Spinner />}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const buyOrder = buyOrderSelector(state);\n  const sellOrder = sellOrderSelector(state);\n\n  return {\n    account: accountSelector(state),\n    exchange: exchangeSelector(state),\n    token: tokenSelector(state),\n    web3: web3Selector(state),\n    buyOrder,\n    sellOrder,\n    showForm: !buyOrder.making && !sellOrder.making,\n    showBuyTotal: buyOrder.amount && buyOrder.price,\n    showSellTotal: sellOrder.amount && sellOrder.price,\n  };\n};\n\nexport default connect(mapStateToProps)(NewOrder);\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { exchangeSelector } from '../store/selectors';\nimport { loadAllOrders, subscribeToEvents } from '../store/interactions';\nimport OrderBook from './OrderBook';\nimport Trades from './Trades';\nimport MyTransactions from './MyTransactions';\nimport PriceChart from './PriceChart';\nimport Balance from './Balance';\nimport NewOrder from './NewOrder';\n\nconst Content = (props) => {\n  useEffect(() => {\n    const loadBlockchainData = async (props) => {\n      const { dispatch, exchange } = props;\n      await loadAllOrders(exchange, dispatch);\n      await subscribeToEvents(exchange, dispatch);\n    };\n    loadBlockchainData(props);\n  }, [props]);\n\n  return (\n    <div className='content'>\n      <div className='vertical-split'>\n        <Balance />\n        <NewOrder />\n      </div>\n      <OrderBook />\n      <div className='vertical-split'>\n        <PriceChart />\n        <MyTransactions />\n      </div>\n      <Trades />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    exchange: exchangeSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Content);\n","import { useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {\n  loadWeb3,\n  loadAccount,\n  loadToken,\n  loadExchange,\n} from '../store/interactions';\nimport { contractsLoadedSelector } from '../store/selectors';\nimport Navbar from './Navbar';\nimport Content from './Content';\n\nfunction App(props) {\n  useEffect(() => {\n    const loadBlockchainData = async (dispatch) => {\n      const web3 = await loadWeb3(dispatch);\n      const networkId = await web3.eth.net.getId();\n      await loadAccount(web3, dispatch);\n      const token = await loadToken(web3, networkId, dispatch)\n      if (!token) {\n        window.alert(\n          'Token smart contract not detected on the current network. Please select another network with Metamask.'\n        );\n        return;\n      }\n      const exchange = await loadExchange(web3, networkId, dispatch);\n      if (!exchange) {\n        window.alert(\n          'Exchange smart contract not detected on the current network. Please select another network with Metamask.'\n        );\n        return;\n      }\n    };\n    loadBlockchainData(props.dispatch);\n  }, [props.dispatch]);\n\n  return (\n    <div>\n      <Navbar />\n      {props.contractsLoaded ? (\n        <Content />\n      ) : (\n        <div className='content'></div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    contractsLoaded: contractsLoadedSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\n\nfunction web3(state = {}, action) {\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return { ...state, connection: action.connection };\n    case 'WEB3_ACCOUNT_LOADED':\n      return { ...state, account: action.account };\n    case 'ETHER_BALANCE_LOADED':\n      return { ...state, balance: action.balance };\n    default:\n      return state;\n  }\n}\n\nfunction token(state = {}, action) {\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return { ...state, loaded: true, contract: action.contract };\n    case 'TOKEN_BALANCE_LOADED':\n      return { ...state, balance: action.balance };\n    default:\n      return state;\n  }\n}\n\nfunction exchange(state = {}, action) {\n  let index, data;\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return { ...state, loaded: true, contract: action.contract };\n    case 'CANCELLED_ORDERS_LOADED':\n      return {\n        ...state,\n        cancelledOrders: { loaded: true, data: action.cancelledOrders },\n      };\n    case 'FILLED_ORDERS_LOADED':\n      return {\n        ...state,\n        filledOrders: { loaded: true, data: action.filledOrders },\n      };\n    case 'ALL_ORDERS_LOADED':\n      return { ...state, allOrders: { loaded: true, data: action.allOrders } };\n    case 'ORDER_CANCELLING':\n      return { ...state, orderCancelling: true };\n    case 'ORDER_CANCELLED':\n      return {\n        ...state,\n        orderCancelling: false,\n        cancelledOrders: {\n          ...state.cancelledOrders,\n          data: [...state.cancelledOrders.data, action.order],\n        },\n      };\n    case 'ORDER_FILLED':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(\n        (order) => order.id === action.order.id\n      );\n\n      if (index === -1) {\n        data = [...state.filledOrders.data, action.order];\n      } else {\n        data = state.filledOrders.data;\n      }\n\n      return {\n        ...state,\n        orderFilling: false,\n        filledOrders: {\n          ...state.filledOrders,\n          data,\n        },\n      };\n\n    case 'ORDER_FILLING':\n      return { ...state, orderFilling: true };\n\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n      return { ...state, etherBalance: action.balance };\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return { ...state, tokenBalance: action.balance };\n    case 'BALANCES_LOADING':\n      return { ...state, balancesLoading: true };\n    case 'BALANCES_LOADED':\n      return { ...state, balancesLoading: false };\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n      return { ...state, etherDepositAmount: action.amount };\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n      return { ...state, etherWithdrawAmount: action.amount };\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return { ...state, tokenDepositAmount: action.amount };\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return { ...state, tokenWithdrawAmount: action.amount };\n    case 'BUY_ORDER_AMOUNT_CHANGED':\n      return {\n        ...state,\n        buyOrder: { ...state.buyOrder, amount: action.amount },\n      };\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price } };\n    case 'BUY_ORDER_MAKING':\n      return {\n        ...state,\n        buyOrder: {\n          ...state.buyOrder,\n          amount: null,\n          price: null,\n          making: true,\n        },\n      };\n    case 'ORDER_MADE':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndex(\n        (order) => order.id === action.order.id\n      );\n\n      if (index === -1) {\n        data = [...state.allOrders.data, action.order];\n      } else {\n        data = state.allOrders.data;\n      }\n\n      return {\n        ...state,\n        allOrders: {\n          ...state.allOrders,\n          data,\n        },\n        buyOrder: {\n          ...state.buyOrder,\n          making: false,\n        },\n        sellOrder: {\n          ...state.sellOrder,\n          making: false,\n        },\n      };\n    case 'SELL_ORDER_AMOUNT_CHANGED':\n      return {\n        ...state,\n        sellOrder: { ...state.sellOrder, amount: action.amount },\n      };\n    case 'SELL_ORDER_PRICE_CHANGED':\n      return {\n        ...state,\n        sellOrder: { ...state.sellOrder, price: action.price },\n      };\n    case 'SELL_ORDER_MAKING':\n      return {\n        ...state,\n        sellOrder: {\n          ...state.sellOrder,\n          amount: null,\n          price: null,\n          making: true,\n        },\n      };\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  web3,\n  token,\n  exchange,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport configureStore from './store/configureStore'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import { createStore } from 'redux'\n// import { createStore, applyMiddleware, compose } from 'redux'\n// import { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\n// const loggerMiddleware = createLogger();\n// const middleware = []\n\n// For Redux Dev Tools\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n// export default function configureStore(preloadedState) {\n//   return createStore(\n//     rootReducer,\n//     preloadedState,\n//     composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n//   )\n// }\n\nexport default function configureStore() {\n  return createStore(rootReducer)\n}"],"sourceRoot":""}